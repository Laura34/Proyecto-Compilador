/* The following code was generated by JFlex 1.4.3 on 19/10/21 15:28 */

package codigo;
import static codigo.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/10/21 15:28 from the specification file
 * <tt>C:/Users/Usuario 1/Desktop/Proyecto-Compilador/Compilador/src/codigo/Lexico.flex</tt>
 */
class Lexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\10\2\0\1\5\22\0\1\5\1\44\1\7\2\0\1\42"+
    "\2\0\1\56\1\57\1\36\1\40\1\5\1\41\1\4\1\35\1\3"+
    "\11\2\1\54\1\55\1\45\1\37\1\46\2\0\1\47\2\1\1\51"+
    "\11\1\1\50\1\52\1\34\1\1\1\53\10\1\1\60\1\0\1\61"+
    "\1\43\1\1\1\0\1\16\1\22\1\20\1\21\1\11\1\26\1\33"+
    "\1\30\1\24\2\1\1\17\1\27\1\12\1\15\1\32\1\1\1\14"+
    "\1\6\1\13\1\23\1\25\1\1\1\31\2\1\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\4\1\1\15\2\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\1\1\14"+
    "\1\15\2\2\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\2\1\3\1\0\1\4\1\24\1\0\1\25\24\2"+
    "\1\4\1\0\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\2\1\34\2\0\1\35\1\3\30\2\1\0\1\36"+
    "\2\0\2\3\1\35\1\0\1\24\27\2\1\4\46\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\62\0\u044c"+
    "\0\u047e\0\u04b0\0\62\0\62\0\u04e2\0\u0514\0\u0546\0\u0578"+
    "\0\u05aa\0\62\0\62\0\62\0\62\0\62\0\62\0\u05dc"+
    "\0\u060e\0\u0640\0\u0672\0\u06a4\0\u015e\0\u015e\0\u06d6\0\u0708"+
    "\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898"+
    "\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\62\0\62\0\62\0\62"+
    "\0\62\0\62\0\u0b22\0\144\0\u0b54\0\u0b86\0\u0bb8\0\u0bea"+
    "\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a"+
    "\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a"+
    "\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\144\0\u10fe\0\u0bb8\0\62\0\u0bb8\0\u0bea\0\u0bea"+
    "\0\144\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec"+
    "\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\u0af0\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da"+
    "\0\u170c\0\u06a4\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\6\1\11\1\12\1\3\1\13\3\3\1\14\1\15"+
    "\1\16\1\3\1\17\1\20\1\21\1\22\1\23\1\3"+
    "\1\24\1\3\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\2\3\1\41"+
    "\1\3\1\42\1\43\1\44\1\45\1\46\1\47\63\0"+
    "\1\3\2\50\2\0\1\3\2\0\24\3\12\0\5\3"+
    "\10\0\2\51\1\52\61\0\1\52\62\0\2\6\1\0"+
    "\1\6\52\0\1\3\2\50\1\0\1\6\1\53\1\0"+
    "\1\6\13\3\1\54\10\3\12\0\5\3\6\0\7\55"+
    "\1\56\1\0\51\55\1\0\1\3\2\50\2\0\1\57"+
    "\2\0\1\3\1\60\4\3\1\61\11\3\1\62\3\3"+
    "\12\0\5\3\7\0\1\3\2\50\2\0\1\3\2\0"+
    "\12\3\1\63\11\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\1\64\23\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\4\3\1\65\1\66"+
    "\1\67\15\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\1\70\23\3\12\0\5\3\7\0\1\3"+
    "\2\50\2\0\1\3\2\0\4\3\1\71\17\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\1\3"+
    "\1\72\22\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\1\73\23\3\12\0\5\3\7\0\1\3"+
    "\2\50\2\0\1\3\2\0\5\3\1\74\16\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\1\75"+
    "\12\3\1\76\10\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\5\3\1\77\16\3\12\0\5\3"+
    "\7\0\1\3\2\50\2\0\1\3\2\0\3\3\1\100"+
    "\6\3\1\101\11\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\3\3\1\102\20\3\12\0\5\3"+
    "\43\0\1\103\1\104\62\0\1\105\62\0\1\106\62\0"+
    "\1\107\57\0\1\110\61\0\1\111\61\0\1\112\23\0"+
    "\1\3\2\50\2\0\1\3\2\0\24\3\12\0\1\3"+
    "\1\113\3\3\7\0\1\3\2\50\2\0\1\3\2\0"+
    "\24\3\12\0\4\3\1\114\7\0\1\3\2\50\1\115"+
    "\1\0\1\3\2\0\24\3\12\0\5\3\10\0\2\51"+
    "\1\116\57\0\1\117\1\120\57\0\1\3\2\50\1\0"+
    "\1\6\1\53\1\0\1\6\24\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\1\3\1\121\22\3"+
    "\12\0\5\3\7\0\1\3\2\50\2\0\1\3\2\0"+
    "\7\3\1\122\14\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\2\3\1\123\21\3\12\0\5\3"+
    "\7\0\1\3\2\50\2\0\1\3\2\0\13\3\1\124"+
    "\10\3\12\0\5\3\7\0\1\3\2\50\2\0\1\3"+
    "\2\0\2\3\1\125\21\3\12\0\5\3\7\0\1\3"+
    "\2\50\2\0\1\3\2\0\6\3\1\121\15\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\5\3"+
    "\1\126\16\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\1\3\1\127\22\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\10\3\1\130\13\3"+
    "\12\0\5\3\7\0\1\3\2\50\2\0\1\3\2\0"+
    "\5\3\1\131\16\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\132\2\0\7\3\1\133\4\3\1\134\7\3"+
    "\12\0\5\3\7\0\1\3\2\50\2\0\1\3\2\0"+
    "\6\3\1\135\15\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\136\2\0\7\3\1\137\14\3\12\0\5\3"+
    "\7\0\1\3\2\50\2\0\1\3\2\0\3\3\1\140"+
    "\20\3\12\0\5\3\7\0\1\3\2\50\2\0\1\3"+
    "\2\0\6\3\1\141\15\3\12\0\5\3\7\0\1\3"+
    "\2\50\2\0\1\3\2\0\2\3\1\142\21\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\1\143"+
    "\23\3\12\0\5\3\7\0\1\3\2\50\2\0\1\3"+
    "\2\0\7\3\1\144\14\3\12\0\5\3\7\0\1\3"+
    "\2\50\2\0\1\3\2\0\4\3\1\145\6\3\1\146"+
    "\10\3\12\0\5\3\7\0\1\3\2\50\2\0\1\3"+
    "\2\0\11\3\1\147\12\3\12\0\5\3\7\0\1\3"+
    "\2\50\2\0\1\3\2\0\13\3\1\150\10\3\12\0"+
    "\5\3\6\0\10\103\1\0\51\103\10\104\1\0\25\104"+
    "\1\151\23\104\1\0\1\3\2\50\2\0\1\3\2\0"+
    "\24\3\12\0\2\3\1\152\2\3\10\0\1\153\1\3"+
    "\60\0\1\154\1\155\60\0\1\156\1\154\60\0\1\157"+
    "\1\160\57\0\1\3\2\50\2\0\1\3\2\0\4\3"+
    "\1\161\17\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\3\3\1\162\20\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\1\163\3\3\1\164"+
    "\17\3\12\0\5\3\7\0\1\3\2\50\2\0\1\3"+
    "\2\0\16\3\1\165\5\3\12\0\5\3\7\0\1\3"+
    "\2\50\2\0\1\3\2\0\13\3\1\166\10\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\6\3"+
    "\1\161\15\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\167\2\0\24\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\1\170\23\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\171\2\0\24\3\12\0\5\3"+
    "\7\0\1\3\2\50\2\0\1\3\2\0\2\3\1\172"+
    "\5\3\1\171\13\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\3\3\1\173\20\3\12\0\5\3"+
    "\7\0\1\3\2\50\2\0\1\3\2\0\4\3\1\174"+
    "\17\3\12\0\5\3\7\0\1\3\2\50\2\0\1\3"+
    "\2\0\1\175\23\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\2\3\1\176\21\3\12\0\5\3"+
    "\7\0\1\3\2\50\2\0\1\3\2\0\3\3\1\173"+
    "\2\3\1\177\15\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\10\3\1\200\13\3\12\0\5\3"+
    "\7\0\1\3\2\50\2\0\1\121\2\0\24\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\4\3"+
    "\1\201\17\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\1\3\1\202\22\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\1\203\23\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\2\3"+
    "\1\204\16\3\1\205\2\3\12\0\5\3\7\0\1\3"+
    "\2\50\2\0\1\3\2\0\14\3\1\206\7\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\6\3"+
    "\1\207\15\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\1\3\1\210\22\3\12\0\5\3\6\0"+
    "\10\104\1\0\24\104\1\211\1\151\23\104\2\0\1\3"+
    "\1\153\57\0\1\3\2\50\2\0\1\3\2\0\13\3"+
    "\1\212\10\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\3\3\1\121\20\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\1\3\1\213\22\3"+
    "\12\0\5\3\7\0\1\3\2\50\2\0\1\3\2\0"+
    "\13\3\1\214\10\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\1\215\23\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\2\3\1\172\21\3"+
    "\12\0\5\3\7\0\1\3\2\50\2\0\1\3\2\0"+
    "\1\3\1\216\22\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\1\161\23\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\3\3\1\217\20\3"+
    "\12\0\5\3\7\0\1\3\2\50\2\0\1\3\2\0"+
    "\1\220\23\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\6\3\1\221\15\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\5\3\1\222\16\3"+
    "\12\0\5\3\7\0\1\3\2\50\2\0\1\3\2\0"+
    "\5\3\1\223\16\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\12\3\1\224\11\3\12\0\5\3"+
    "\7\0\1\3\2\50\2\0\1\3\2\0\5\3\1\225"+
    "\16\3\12\0\5\3\7\0\1\3\2\50\2\0\1\3"+
    "\2\0\10\3\1\226\13\3\12\0\5\3\7\0\1\3"+
    "\2\50\2\0\1\3\2\0\2\3\1\227\21\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\3\3"+
    "\1\161\20\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\1\230\23\3\12\0\5\3\7\0\1\3"+
    "\2\50\2\0\1\3\2\0\13\3\1\231\10\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\5\3"+
    "\1\232\16\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\13\3\1\233\10\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\7\3\1\234\14\3"+
    "\12\0\5\3\7\0\1\3\2\50\2\0\1\3\2\0"+
    "\11\3\1\224\12\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\7\3\1\235\14\3\12\0\5\3"+
    "\7\0\1\3\2\50\2\0\1\3\2\0\1\3\1\236"+
    "\22\3\12\0\5\3\7\0\1\3\2\50\2\0\1\3"+
    "\2\0\1\3\1\237\22\3\12\0\5\3\7\0\1\3"+
    "\2\50\2\0\1\3\2\0\5\3\1\161\16\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\12\3"+
    "\1\240\11\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\16\3\1\241\5\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\14\3\1\144\7\3"+
    "\12\0\5\3\7\0\1\3\2\50\2\0\1\3\2\0"+
    "\1\3\1\242\22\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\13\3\1\203\10\3\12\0\5\3"+
    "\7\0\1\3\2\50\2\0\1\3\2\0\10\3\1\243"+
    "\13\3\12\0\5\3\7\0\1\3\2\50\2\0\1\3"+
    "\2\0\4\3\1\244\17\3\12\0\5\3\7\0\1\3"+
    "\2\50\2\0\1\3\2\0\3\3\1\245\20\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\22\3"+
    "\1\246\1\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\1\247\23\3\12\0\5\3\7\0\1\3"+
    "\2\50\2\0\1\3\2\0\10\3\1\245\13\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\7\3"+
    "\1\245\14\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\13\3\1\250\10\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\1\244\23\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\5\3"+
    "\1\203\16\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\10\3\1\171\13\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\7\3\1\251\14\3"+
    "\12\0\5\3\7\0\1\3\2\50\2\0\1\3\2\0"+
    "\1\252\23\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\7\3\1\253\14\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\1\163\23\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\161\2\0\24\3"+
    "\12\0\5\3\7\0\1\3\2\50\2\0\1\3\2\0"+
    "\5\3\1\244\16\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\13\3\1\232\10\3\12\0\5\3"+
    "\7\0\1\3\2\50\2\0\1\3\2\0\10\3\1\254"+
    "\13\3\12\0\5\3\7\0\1\3\2\50\2\0\1\3"+
    "\2\0\21\3\1\64\2\3\12\0\5\3\7\0\1\3"+
    "\2\50\2\0\1\3\2\0\2\3\1\255\21\3\12\0"+
    "\5\3\7\0\1\3\2\50\2\0\1\3\2\0\1\3"+
    "\1\256\22\3\12\0\5\3\7\0\1\3\2\50\2\0"+
    "\1\3\2\0\13\3\1\236\10\3\12\0\5\3\7\0"+
    "\1\3\2\50\2\0\1\3\2\0\5\3\1\257\16\3"+
    "\12\0\5\3\7\0\1\3\2\50\2\0\1\3\2\0"+
    "\4\3\1\203\17\3\12\0\5\3\7\0\1\3\2\50"+
    "\2\0\1\3\2\0\2\3\1\236\21\3\12\0\5\3"+
    "\7\0\1\3\2\50\2\0\1\3\2\0\10\3\1\235"+
    "\13\3\12\0\5\3\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\1\11\3\1\2\11\5\1\6\11"+
    "\2\1\1\0\2\1\1\0\26\1\1\0\6\11\2\1"+
    "\2\0\32\1\1\0\1\1\2\0\1\11\2\1\1\0"+
    "\77\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { lexeme=yytext();return ParentesisA;
          }
        case 31: break;
        case 6: 
          { lexeme=yytext();return Multiplicacion;
          }
        case 32: break;
        case 8: 
          { lexeme=yytext();return Suma;
          }
        case 33: break;
        case 25: 
          { lexeme=yytext();return Diferente;
          }
        case 34: break;
        case 23: 
          { lexeme=yytext();return Incremento;
          }
        case 35: break;
        case 29: 
          { lexeme=yytext();return Real;
          }
        case 36: break;
        case 21: 
          { lexeme=yytext(); return Cadena;
          }
        case 37: break;
        case 15: 
          { lexeme=yytext();return PuntoComa;
          }
        case 38: break;
        case 20: 
          { lexeme=yytext(); return Reservada;
          }
        case 39: break;
        case 27: 
          { lexeme=yytext();return MayorIgual;
          }
        case 40: break;
        case 28: 
          { lexeme=yytext();return Or;
          }
        case 41: break;
        case 19: 
          { lexeme=yytext();return CorcheteC;
          }
        case 42: break;
        case 24: 
          { lexeme=yytext();return Decremento;
          }
        case 43: break;
        case 7: 
          { lexeme=yytext();return Igual;
          }
        case 44: break;
        case 12: 
          { lexeme=yytext();return Menor;
          }
        case 45: break;
        case 30: 
          { lexeme=yytext();return And;
          }
        case 46: break;
        case 10: 
          { lexeme=yytext();return Modulo;
          }
        case 47: break;
        case 14: 
          { lexeme=yytext();return DosPuntos;
          }
        case 48: break;
        case 17: 
          { lexeme=yytext();return ParentesisC;
          }
        case 49: break;
        case 5: 
          { lexeme=yytext();return Division;
          }
        case 50: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 51: break;
        case 13: 
          { lexeme=yytext();return Mayor;
          }
        case 52: break;
        case 1: 
          { return ERROR;
          }
        case 53: break;
        case 26: 
          { lexeme=yytext();return MenorIgual;
          }
        case 54: break;
        case 18: 
          { lexeme=yytext();return CorcheteA;
          }
        case 55: break;
        case 4: 
          { /*Ignore*/
          }
        case 56: break;
        case 9: 
          { lexeme=yytext();return Resta;
          }
        case 57: break;
        case 3: 
          { lexeme=yytext();return Entero;
          }
        case 58: break;
        case 22: 
          { lexeme=yytext();return Comparador;
          }
        case 59: break;
        case 11: 
          { lexeme=yytext();return Exponenciacion;
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
