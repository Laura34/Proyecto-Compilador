/* The following code was generated by JFlex 1.4.3 on 16/11/21 16:31 */

package codigo;
import static codigo.Tokens.*;
import java_cup.runtime.Symbol;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.File;
import java_cup.runtime.*;
import static codigo.sym.*;
import java.io.StringReader;
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/11/21 16:31 from the specification file
 * <tt>lexer.txt</tt>
 */
class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\13\2\0\1\7\22\0\1\7\1\47\1\12\2\0"+
    "\1\45\2\0\1\61\1\62\1\43\1\41\1\67\1\42\1\6\1\44"+
    "\1\5\11\4\1\57\1\60\1\50\1\40\1\51\2\0\1\52\2\2"+
    "\1\54\11\2\1\53\1\55\1\37\1\2\1\56\10\2\1\63\1\0"+
    "\1\64\1\46\1\3\1\0\1\21\1\25\1\23\1\24\1\14\1\31"+
    "\1\36\1\33\1\27\2\1\1\22\1\32\1\15\1\20\1\35\1\1"+
    "\1\17\1\10\1\16\1\26\1\30\1\1\1\34\2\1\1\65\1\0"+
    "\1\66\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\2\4\1\5\1\1"+
    "\1\2\1\6\1\1\15\2\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\1\1\16\1\17\2\3"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\2\2\3\1\0\1\30\1\0\1\2\1\31\1\0"+
    "\1\32\24\2\1\3\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\3\1\41\2\0\1\42\1\4\1\0\32\2"+
    "\1\3\1\43\2\0\1\4\1\0\1\42\1\0\1\6"+
    "\1\44\5\2\1\45\1\46\1\47\24\2\1\3\7\2"+
    "\1\50\1\2\1\51\7\2\1\52\2\2\1\53\4\2"+
    "\1\3\1\2\1\54\4\2\1\55\16\2\1\3\10\2"+
    "\1\56\2\2\1\57\1\2\1\60\5\2\1\3\1\61"+
    "\1\62\1\63\1\64\3\2\1\65\3\2\1\66\2\2"+
    "\1\67\1\70\1\3\5\2\1\71\2\2\1\72\1\2"+
    "\1\73\1\2\1\74\1\2\1\75\1\2\1\76\1\77"+
    "\1\100\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\70\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\70\0\70\0\70"+
    "\0\70\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\u0738\0\u0770"+
    "\0\u07a8\0\u07e0\0\70\0\u0818\0\u0850\0\u0888\0\u0230\0\u0230"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\u0d58\0\250\0\u0d90\0\u0dc8\0\u0e00"+
    "\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0"+
    "\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180"+
    "\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340"+
    "\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\250\0\u1490\0\u14c8"+
    "\0\u1500\0\u0e00\0\u1538\0\u1538\0\u0e70\0\160\0\u1570\0\u15a8"+
    "\0\u15e0\0\u1618\0\u1650\0\160\0\160\0\160\0\u1688\0\u16c0"+
    "\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880"+
    "\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40"+
    "\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00"+
    "\0\u1c38\0\u1c70\0\160\0\u1ca8\0\160\0\u1ce0\0\u1d18\0\u1d50"+
    "\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\160\0\u1e68\0\u1ea0\0\160"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\160\0\u2028"+
    "\0\u2060\0\u2098\0\u20d0\0\160\0\u2108\0\u2140\0\u2178\0\u21b0"+
    "\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370"+
    "\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530"+
    "\0\u2568\0\u25a0\0\u25d8\0\160\0\u2610\0\u2648\0\160\0\u2680"+
    "\0\160\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0\0\160"+
    "\0\160\0\160\0\160\0\u2808\0\u2840\0\u2878\0\160\0\u28b0"+
    "\0\u28e8\0\u2920\0\160\0\u2958\0\u2990\0\160\0\160\0\u29c8"+
    "\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\160\0\u2b18\0\u2b50"+
    "\0\u0770\0\u2b88\0\160\0\u2bc0\0\160\0\u2bf8\0\160\0\u2c30"+
    "\0\160\0\160\0\160\0\160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\0\1\15\1\16\1\3\1\17"+
    "\2\3\1\20\1\21\1\22\1\23\1\3\1\24\1\25"+
    "\1\26\1\27\1\30\1\3\1\31\1\3\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\2\4\1\46\1\4\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\11\71\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\23\3\32\0"+
    "\1\60\2\4\2\61\2\0\1\60\3\0\23\60\1\4"+
    "\12\0\5\4\12\0\1\3\1\4\1\5\2\57\2\0"+
    "\1\3\3\0\23\3\1\4\12\0\5\4\15\0\2\6"+
    "\1\62\67\0\1\62\150\0\1\63\7\0\2\64\56\0"+
    "\1\64\1\0\1\3\1\0\1\3\2\57\1\0\1\64"+
    "\1\65\3\0\13\3\1\66\7\3\30\0\1\64\12\67"+
    "\1\70\1\0\54\67\1\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\71\3\0\1\3\1\72\4\3\1\73\11\3"+
    "\1\74\2\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\12\3\1\75\10\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\1\76\22\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\1\77"+
    "\22\3\32\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\4\3\1\100\1\101\1\102\14\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\1\103\22\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\4\3\1\104\16\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\1\3\1\105\21\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\1\106\22\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\5\3\1\107\15\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\1\110\12\3\1\111\7\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\5\3"+
    "\1\112\15\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\3\3\1\113\6\3\1\114\10\3\32\0"+
    "\1\60\2\4\2\61\2\0\1\60\3\0\3\60\1\115"+
    "\17\60\1\4\12\0\5\4\51\0\1\116\70\0\1\117"+
    "\70\0\1\120\65\0\1\121\67\0\1\122\67\0\1\123"+
    "\30\0\1\60\2\4\2\61\2\0\1\60\3\0\23\60"+
    "\1\4\12\0\1\4\1\124\3\4\12\0\1\60\2\4"+
    "\2\61\2\0\1\60\3\0\23\60\1\4\12\0\4\4"+
    "\1\125\12\0\1\3\1\0\1\3\2\57\1\126\1\0"+
    "\1\3\3\0\23\3\32\0\1\60\1\0\1\60\2\61"+
    "\2\0\1\60\3\0\23\60\32\0\1\60\1\0\1\60"+
    "\2\61\1\127\1\0\1\60\3\0\23\60\35\0\1\130"+
    "\1\131\71\0\2\132\56\0\1\132\1\0\1\3\1\0"+
    "\1\3\2\57\1\0\1\132\1\133\3\0\23\3\30\0"+
    "\1\132\1\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\1\3\1\134\21\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\7\3\1\135\13\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\2\3"+
    "\1\136\20\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\13\3\1\137\7\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\2\3\1\140\20\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\6\3\1\141\14\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\5\3\1\142\15\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\1\143\22\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\1\3\1\144\21\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\10\3\1\145\12\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\5\3\1\146"+
    "\15\3\32\0\1\3\1\0\1\3\2\57\2\0\1\147"+
    "\3\0\7\3\1\150\4\3\1\151\6\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\6\3\1\152"+
    "\14\3\32\0\1\3\1\0\1\3\2\57\2\0\1\153"+
    "\3\0\7\3\1\154\13\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\3\3\1\155\17\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\6\3"+
    "\1\156\14\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\2\3\1\157\20\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\1\160\22\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\7\3"+
    "\1\161\13\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\4\3\1\162\6\3\1\163\7\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\11\3"+
    "\1\164\11\3\32\0\1\60\1\0\1\60\2\61\2\0"+
    "\1\60\3\0\13\60\1\165\7\60\32\0\1\60\2\4"+
    "\2\61\2\0\1\60\3\0\23\60\1\4\12\0\2\4"+
    "\1\166\2\4\15\0\1\167\1\3\66\0\1\170\1\60"+
    "\66\0\1\171\1\172\66\0\1\173\2\174\70\0\2\175"+
    "\56\0\1\175\1\0\1\3\1\0\1\3\2\57\1\0"+
    "\1\175\1\133\3\0\23\3\30\0\1\175\1\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\4\3\1\176"+
    "\16\3\32\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\3\3\1\177\17\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\1\200\3\3\1\201\16\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\16\3\1\202\4\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\13\3\1\203\7\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\4\3\1\204"+
    "\16\3\32\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\6\3\1\205\14\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\3\3\1\206\17\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\207\3\0\23\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\1\210\22\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\211\3\0\23\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\2\3\1\212\5\3\1\213\12\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\3\3\1\214\17\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\4\3\1\215\16\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\1\216\22\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\2\3\1\217\20\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\3\3\1\220\2\3\1\221\14\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\10\3\1\222\12\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\223\3\0\23\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\4\3\1\224\16\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\1\3"+
    "\1\225\21\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\1\226\22\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\2\3\1\227\16\3\1\230"+
    "\1\3\32\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\14\3\1\231\6\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\6\3\1\232\14\3\32\0"+
    "\1\60\1\0\1\60\2\61\2\0\1\60\3\0\1\60"+
    "\1\233\21\60\35\0\1\3\1\167\66\0\1\60\1\170"+
    "\66\0\1\171\1\172\1\174\65\0\1\173\1\174\63\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\13\3"+
    "\1\234\7\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\3\3\1\235\17\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\1\3\1\236\21\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\13\3\1\237\7\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\1\240\22\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\2\3\1\241\20\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\1\3\1\242\21\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\1\243\22\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\3\3\1\244\17\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\1\245\22\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\1\246\22\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\6\3\1\247\14\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\5\3"+
    "\1\250\15\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\5\3\1\251\15\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\1\252\22\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\12\3"+
    "\1\253\10\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\5\3\1\254\15\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\4\3\1\255\16\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\10\3\1\256\12\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\2\3\1\257\20\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\3\3\1\260"+
    "\17\3\32\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\1\261\22\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\13\3\1\262\7\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\5\3\1\263"+
    "\15\3\32\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\13\3\1\264\7\3\32\0\1\60\1\0\1\60"+
    "\2\61\2\0\1\60\3\0\7\60\1\265\13\60\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\11\3"+
    "\1\266\11\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\4\3\1\267\16\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\7\3\1\270\13\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\1\3\1\271\21\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\1\3\1\272\21\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\3\3\1\273"+
    "\17\3\32\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\5\3\1\274\15\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\12\3\1\275\10\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\16\3"+
    "\1\276\4\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\14\3\1\277\6\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\1\3\1\300\21\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\1\3\1\301\21\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\16\3\1\302\4\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\13\3\1\303"+
    "\7\3\32\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\10\3\1\304\12\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\4\3\1\305\16\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\3\3"+
    "\1\306\17\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\22\3\1\307\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\1\310\22\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\10\3\1\311"+
    "\12\3\32\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\7\3\1\312\13\3\32\0\1\60\1\0\1\60"+
    "\2\61\2\0\1\60\3\0\13\60\1\313\7\60\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\13\3"+
    "\1\314\7\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\1\315\22\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\5\3\1\316\15\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\10\3"+
    "\1\317\12\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\12\3\1\320\10\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\7\3\1\321\13\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\1\322\22\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\1\323\22\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\4\3\1\324\16\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\7\3"+
    "\1\325\13\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\1\326\22\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\3\3\1\327\17\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\1\330"+
    "\22\3\32\0\1\3\1\0\1\3\2\57\2\0\1\331"+
    "\3\0\23\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\5\3\1\332\15\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\13\3\1\333\7\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\10\3\1\334\12\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\5\3\1\335\15\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\5\3\1\336"+
    "\15\3\32\0\1\60\1\0\1\60\2\61\2\0\1\60"+
    "\3\0\21\60\1\337\1\60\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\3\3\1\340\17\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\341\3\0\23\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\3\3\1\342\17\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\1\343\22\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\7\3\1\344\13\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\2\3\1\345\20\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\1\3\1\346\21\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\3\3\1\347"+
    "\17\3\32\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\13\3\1\350\7\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\1\3\1\351\21\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\3\3"+
    "\1\352\17\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\353\3\0\23\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\10\3\1\354\12\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\5\3\1\355"+
    "\15\3\32\0\1\3\1\0\1\3\2\57\2\0\1\356"+
    "\3\0\23\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\357\3\0\23\3\32\0\1\60\1\0\1\60\2\61"+
    "\2\0\1\60\3\0\5\60\1\360\15\60\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\2\3\1\361"+
    "\20\3\32\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\4\3\1\362\16\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\2\3\1\363\20\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\5\3"+
    "\1\364\15\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\2\3\1\365\20\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\4\3\1\366\16\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\3\3\0"+
    "\5\3\1\367\15\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\10\3\1\370\12\3\32\0\1\60"+
    "\1\0\1\60\2\61\2\0\1\60\3\0\6\60\1\371"+
    "\14\60\32\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\4\3\1\372\16\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\3\3\0\3\3\1\373\17\3\32\0"+
    "\1\3\1\0\1\3\2\57\2\0\1\3\3\0\5\3"+
    "\1\374\15\3\32\0\1\3\1\0\1\3\2\57\2\0"+
    "\1\3\3\0\3\3\1\375\17\3\32\0\1\3\1\0"+
    "\1\3\2\57\2\0\1\3\3\0\5\3\1\376\15\3"+
    "\32\0\1\3\1\0\1\3\2\57\2\0\1\377\3\0"+
    "\23\3\32\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\1\u0100\22\3\32\0\1\3\1\0\1\3\2\57"+
    "\2\0\1\3\3\0\3\3\1\u0101\17\3\32\0\1\3"+
    "\1\0\1\3\2\57\2\0\1\3\3\0\3\3\1\u0102"+
    "\17\3\32\0\1\3\1\0\1\3\2\57\2\0\1\3"+
    "\3\0\3\3\1\u0103\17\3\32\0\1\3\1\0\1\3"+
    "\2\57\2\0\1\u0104\3\0\23\3\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11368];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\22\1\4\11\5\1\10\11"+
    "\3\1\1\0\1\11\1\0\2\1\1\0\26\1\6\11"+
    "\2\1\2\0\2\1\1\0\34\1\2\0\1\1\1\0"+
    "\1\1\1\0\210\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int tab = 0;
    BufferedWriter bw;
    public String direccion;
    private Object java_cup;
    private Object java_cup;
    private Object java_cup;

    Lexico(StringReader stringReader) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    private int getTab(){
        int tabaux = tab;
        tab = 0;
        return tabaux;
   }
   private void escribir(int tipo,String f) throws IOException{
        switch(tipo){
        case 1: bw.write("PALABRA RESERVADA "+f); break;
        case 2: bw.write("OPERADOR "+f); break;
        case 3: bw.write("SIGNO "+f);break;
        case 4: bw.write("CADENA "+f);break;
        case 5: bw.write("COMENTARIO "+f);break;
        case 6: bw.write("NUMERO"+f);break;
        case 7: bw.write("IDENTFICADOR"+f);break;
        case 8: bw.write("ARCHIVO EXCEL"+f);break;
        case 9: bw.write("ARCHIVO OPENOFFICE"+f);break;
        case 10: bw.write("ARCHIVO OPENOFFICE"+f);break;
        }
        bw.newLine();
   }
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in, String direccion) throws IOException {
      
    if(direccion.isEmpty())
        this.direccion="tokens.txt";
    else
        this.direccion=direccion+File.separator+"tokens.txt";
    bw = new BufferedWriter(new FileWriter(this.direccion));
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexico(java.io.InputStream in, String direccion) throws IOException {
    this(new java.io.InputStreamReader(in), direccion);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { escribir(1,"constructor");return new java_cup.runtime.Symbol(sym.Constructor, yytext(), yyline, yycolumn, getTab());
          }
        case 66: break;
        case 61: 
          { escribir(1,"protegidas");return new java_cup.runtime.Symbol(sym.Protegidas, yytext(), yyline, yycolumn, getTab());
          }
        case 67: break;
        case 65: 
          { escribir(1,"proiedades");return new java_cup.runtime.Symbol(sym.Propiedades, yytext(), yyline, yycolumn, getTab());
          }
        case 68: break;
        case 53: 
          { escribir(1,"devolver");return new java_cup.runtime.Symbol(sym.Devolver, yytext(), yyline, yycolumn, getTab());
          }
        case 69: break;
        case 48: 
          { escribir(1,"metodos");return new java_cup.runtime.Symbol(sym.Metodos, yytext(), yyline, yycolumn, getTab());
          }
        case 70: break;
        case 3: 
          { escribir(7,yytext());return new java_cup.runtime.Symbol(sym.IdClase, yytext(), yyline, yycolumn, getTab());
          }
        case 71: break;
        case 4: 
          { escribir(4,yytext());return new java_cup.runtime.Symbol(sym.NumEntero, yytext(), yyline, yycolumn, getTab());
          }
        case 72: break;
        case 33: 
          { escribir(1,"OR");return new java_cup.runtime.Symbol(sym.Or, yytext(), yyline, yycolumn, getTab());
          }
        case 73: break;
        case 28: 
          { escribir(2,"++");return new java_cup.runtime.Symbol(sym.Incremento, yytext(), yyline, yycolumn, getTab());
          }
        case 74: break;
        case 14: 
          { escribir(2,"<");return new java_cup.runtime.Symbol(sym.Menor, yytext(), yyline, yycolumn, getTab());
          }
        case 75: break;
        case 43: 
          { escribir(1,"hacer");return new java_cup.runtime.Symbol(sym.Hacer, yytext(), yyline, yycolumn, getTab());
          }
        case 76: break;
        case 5: 
          { escribir(10,yytext());return new java_cup.runtime.Symbol(sym.Punto, yytext(), yyline, yycolumn, getTab());
          }
        case 77: break;
        case 56: 
          { escribir(1,"publicas");return new java_cup.runtime.Symbol(sym.Publicas, yytext(), yyline, yycolumn, getTab());
          }
        case 78: break;
        case 49: 
          { escribir(1,"escribir");return new java_cup.runtime.Symboll(sym.Escribir, yytext(), yyline, yycolumn, getTab());
          }
        case 79: break;
        case 52: 
          { escribir(1,"extiende");return java_cup.runtime.Symbol(sym.Extiende, yytext(), yyline, yycolumn, getTab());
          }
        case 80: break;
        case 36: 
          { escribir(1,"sino");return new java_cup.runtime.Symbol(sym.Sino, yytext(), yyline, yycolumn, getTab());
          }
        case 81: break;
        case 64: 
          { escribir(1,"incrementar");return new java_cup.runtime.Symbol(sym.Incrementar, yytext(), yyline, yycolumn, getTab());
          }
        case 82: break;
        case 23: 
          { escribir(3,"]");return new java_cup.runtime.Symbol(sym.LlaveC, yytext(), yyline, yycolumn, getTab());
          }
        case 83: break;
        case 8: 
          { escribir(2,"+");return new java_cup.runtime.Symbol(sym.Suma, yytext(), yyline, yycolumn, getTab());
          }
        case 84: break;
        case 40: 
          { escribir(1,"clase");return new java_cup.runtime.Symbol(sym.Clase, yytext(), yyline, yycolumn, getTab());
          }
        case 85: break;
        case 42: 
          { escribir(1,"falso");return new java_cup.runtime.Symbol(sym.Falso, yytext(), yyline, yycolumn, getTab());
          }
        case 86: break;
        case 1: 
          { System.err.println("caracter invalido \"" + yytext() + "\"["+ yyline + ":"+ yycolumn + ":"+ yychar + "]");
                    return new Symbol(sym.error);
          }
        case 87: break;
        case 60: 
          { escribir(1,"instanciar");return new java_cup.runtime.Symbol(sym.Instanciar, yytext(), yyline, yycolumn, getTab());
          }
        case 88: break;
        case 58: 
          { escribir(1,"Principal");return new java_cup.runtime.Symbol(sym.Principal, yytext(), yyline, yycolumn, getTab());
          }
        case 89: break;
        case 55: 
          { escribir(1,"privadas");return new java_cup.runtime.Symbol(sym.Privadas, yytext(), yyline, yycolumn, getTab());
          }
        case 90: break;
        case 18: 
          { escribir(3,"(");return new java_cup.runtime.Symbol(sym.ParentesisA, yytext(), yyline, yycolumn, getTab());
          }
        case 91: break;
        case 41: 
          { escribir(1,"desde");return new java_cup.runtime.Symbol(sym.Desde, yytext(), yyline, yycolumn, getTab());
          }
        case 92: break;
        case 17: 
          { escribir(3,";");return new java_cup.runtime.Symbol(sym.PuntoComa, yytext(), yyline, yycolumn, getTab());
          }
        case 93: break;
        case 30: 
          { escribir(2,"!=");return new java_cup.runtime.Symbol(sym.Diferente, yytext(), yyline, yycolumn, getTab());
          }
        case 94: break;
        case 26: 
          { escribir(8,yytext());return new java_cup.runtime.Symbol(sym.Cadena, yytext(), yyline, yycolumn, getTab());
          }
        case 95: break;
        case 31: 
          { escribir(2,"<=");return new java_cup.runtime.Symbol(sym.MenorIgual, yytext(), yyline, yycolumn, getTab());
          }
        case 96: break;
        case 22: 
          { escribir(3,"[");return new java_cup.runtime.Symbol(sym.LlaveA, yytext(), yyline, yycolumn, getTab());
          }
        case 97: break;
        case 45: 
          { escribir(1,"cadena");return new java_cup.runtime.Symbol(sym.Cadena, yytext(), yyline, yycolumn, getTab());
          }
        case 98: break;
        case 50: 
          { escribir(1,"entonces");return new java_cup.runtime.Symbol(sym.Entonces, yytext(), yyline, yycolumn, getTab());
          }
        case 99: break;
        case 15: 
          { escribir(2,">");return new java_cup.runtime.Symbol(sym.Mayor, yytext(), yyline, yycolumn, getTab());
          }
        case 100: break;
        case 54: 
          { escribir(1,"mientras");return java_cup.runtime.Symbol(sym.Mientras, yytext(), yyline, yycolumn, getTab());
          }
        case 101: break;
        case 51: 
          { escribir(1,"eliminar");return new java_cup.runtime.Symbol(sym.Eliminar,  yytext(), yyline, yycolumn, getTab());
          }
        case 102: break;
        case 38: 
          { escribir(1,"real");return new Symbol(sym.Real, ytext(), yyline, yycolumn, getTab());
          }
        case 103: break;
        case 32: 
          { escribir(2,">=");return new java_cup.runtime.Symbol(sym.MayorIgual, yytext(), yyline, yycolumn, getTab());
          }
        case 104: break;
        case 20: 
          { escribir(3,"[");return new java_cup.runtime.Symbol(sym.CorcheteA, yytext(), yyline, yycolumn, getTab());
          }
        case 105: break;
        case 63: 
          { escribir(1,"decrementar");return new java_cup.runtime.Symbol(sym.Decrementar, yytext(), yyline, yycolumn, getTab());
          }
        case 106: break;
        case 11: 
          { escribir(2,"/");return new java_cup.runtime.Symbol(sym.Division, yytext(), yyline, yycolumn, getTab());
          }
        case 107: break;
        case 44: 
          { escribir(1,"entero");return new Symbol(sym.Entero, yytext(), yyline, yycolumn, getTab());
          }
        case 108: break;
        case 9: 
          { escribir(2,"-");return new java_cup.runtime.Symbol(sym.Resta, yytext(), yyline, yycolumn, getTab());
          }
        case 109: break;
        case 57: 
          { escribir(1,"true");return new java_cup.runtime.Symbol(sym.Verdadero, yytext(), yyline, yycolumn, getTab());
          }
        case 110: break;
        case 21: 
          { escribir(3,"]");return new java_cup.runtime.Symboll(sym.CorcheteC, yytext(), yyline, yycolumn, getTab());
          }
        case 111: break;
        case 59: 
          { escribir(1,"destructor");return new java_cup.runtime.Symbol(sym.Deconstructor, yytext(), yyline, yycolumn, getTab());
          }
        case 112: break;
        case 35: 
          { escribir(1,"AND");return new java_cup.runtime.Symbol(sym.And, yytext(), yyline, yycolumn, getTab());
          }
        case 113: break;
        case 25: 
          { escribir(1,"si");return new java_cup.runtime.Symbol(sym.Si, yytext(), yyline, yycolumn, getTab());
          }
        case 114: break;
        case 10: 
          { escribir(2,"*");return new java_cup.runtime.Symbol(sym.Multiplicacion, yytext(), yyline, yycolumn, getTab());
          }
        case 115: break;
        case 2: 
          { escribir(6,yytext());return new java_cup.runtime.Symbol(sym.Identificador, yytext(), yyline, yycolumn, getTab());
          }
        case 116: break;
        case 19: 
          { escribir(3,")");return new java_cup.runtime.Symbol(sym.ParentesisC, yytext(), yyline, yycolumn, getTab());
          }
        case 117: break;
        case 13: 
          { escribir(2,"^");return new java_cup.runtime.Symbol(sym.Exponenciacion, yytext(), yyline, yycolumn, getTab());
          }
        case 118: break;
        case 16: 
          { escribir(3,":");return new java_cup.runtime.Symbol(sym.DosPuntos, yytext(), yyline, yycolumn, getTab());
          }
        case 119: break;
        case 37: 
          { escribir(1,"nulo");return new java_cup.runtime.Symbol(sym.Nulo, yytext(), yyline, yycolumn, getTab());
          }
        case 120: break;
        case 39: 
          { escribir(1,"leer");return new java_cup.runtime.Symbol(sym.Leer, yytext(), yyline, yycolumn, getTab());
          }
        case 121: break;
        case 7: 
          { escribir(2,"=");return new java_cup.runtime.Symbol(sym.Igual, yytext(), yyline, yycolumn, getTab());
          }
        case 122: break;
        case 24: 
          { escribir(3,",");return new java_cup.runtime.Symbol(sym.Coma, yytext(), yyline, yycolumn, getTab());
          }
        case 123: break;
        case 27: 
          { escribir(2,"==");return new java_cup.runtime.Symbol(sym.Comparador, yytext(), yyline, yycolumn, getTab());
          }
        case 124: break;
        case 34: 
          { escribir(5,yytext());return new java_cup.runtime.Symbol(sym.NumReal, yytext(), yyline, yycolumn, getTab());
          }
        case 125: break;
        case 6: 
          { escribir(9,yytext());return new java_cup.runtime.Symbol(sym.Tabulador, yytext(), yyline, yycolumn, getTab());
          }
        case 126: break;
        case 12: 
          { escribir(2,"%");return new java_cup.runtime.Symboll(sym.Modulo, yytext(), yyline, yycolumn, getTab());
          }
        case 127: break;
        case 47: 
          { escribir(1,"incluir");return new java_cup.runtime.Symbol(sym.Incluir, yytext(), yyline, yycolumn, getTab());
          }
        case 128: break;
        case 46: 
          { escribir(1,"boleano");return new java_cup.runtime.Symbol(sym.Boleano, yytext(), yyline, yycolumn, getTab());
          }
        case 129: break;
        case 29: 
          { escribir(2,"--");return new java_cup.runtime.Symbol(sym.Decremento, yytext(), yyline, yycolumn, getTab());
          }
        case 130: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   bw.close();
  System.out.println("Fin de archivo encontrado");
  return new java_cup.runtime.Symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

    Tokens yylex() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }


}
