
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 07 16:04:53 CST 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 07 16:04:53 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\002\003" +
    "\000\002\002\004\000\002\002\003\000\002\002\004\000" +
    "\002\015\003\000\002\015\003\000\002\007\005\000\002" +
    "\007\004\000\002\007\007\000\002\007\006\000\002\007" +
    "\007\000\002\007\006\000\002\003\005\000\002\003\004" +
    "\000\002\003\007\000\002\003\006\000\002\004\003\000" +
    "\002\004\005\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\016\006\000\002\016\005" +
    "\000\002\016\006\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\006\000\002\016\006\000\002\016\006\000\002\016" +
    "\007\000\002\016\007\000\002\016\007\000\002\016\007" +
    "\000\002\016\006\000\002\016\006\000\002\016\006\000" +
    "\002\016\006\000\002\021\005\000\002\021\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\007" +
    "\000\002\017\007\000\002\020\005\000\002\020\005\000" +
    "\002\020\007\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\004" +
    "\000\002\012\004\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\007\000\002\022\007" +
    "\000\002\022\007\000\002\022\007\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\030\004\011\005\026\006\022\007\013\015" +
    "\024\016\006\024\023\025\005\076\014\100\004\101\016" +
    "\001\002\000\074\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\015\uffe7\016\uffe7\024\uffe7\025\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\065\uffe7" +
    "\067\uffe7\074\uffe7\076\uffe7\100\uffe7\101\uffe7\001\002\000" +
    "\004\076\205\001\002\000\074\002\uffe4\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\015\uffe4\016\uffe4\024\uffe4\025\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\065\uffe4\067\uffe4\074\uffe4\076\uffe4\100\uffe4\101\uffe4" +
    "\001\002\000\032\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\015\ufff7\016\ufff7\024\ufff7\025\ufff7\076\ufff7\100\ufff7" +
    "\101\ufff7\001\002\000\032\002\000\004\011\005\026\006" +
    "\022\007\013\015\024\016\006\024\023\025\005\076\014" +
    "\100\004\101\016\001\002\000\004\076\uffea\001\002\000" +
    "\004\002\203\001\002\000\004\076\uffe8\001\002\000\022" +
    "\043\uffec\054\051\055\057\056\052\057\055\060\056\061" +
    "\047\074\165\001\002\000\032\002\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\015\ufff8\016\ufff8\024\ufff8\025\ufff8\076" +
    "\ufff8\100\ufff8\101\ufff8\001\002\000\074\002\uffe6\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\015\uffe6\016\uffe6\024\uffe6\025" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\063\uffe6\065\uffe6\067\uffe6\074\uffe6\076\uffe6\100\uffe6" +
    "\101\uffe6\001\002\000\016\054\051\055\057\056\052\057" +
    "\055\060\056\061\047\001\002\000\004\076\164\001\002" +
    "\000\032\002\uffff\004\011\005\026\006\022\007\013\015" +
    "\024\016\006\024\023\025\005\076\014\100\004\101\016" +
    "\001\002\000\004\076\164\001\002\000\016\015\024\016" +
    "\006\076\154\100\004\101\016\102\152\001\002\000\074" +
    "\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\015\uffe5\016" +
    "\uffe5\024\uffe5\025\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060" +
    "\uffe5\061\uffe5\062\uffe5\063\uffe5\065\uffe5\067\uffe5\074\uffe5" +
    "\076\uffe5\100\uffe5\101\uffe5\001\002\000\032\002\ufffc\004" +
    "\011\005\026\006\022\007\013\015\024\016\006\024\023" +
    "\025\005\076\014\100\004\101\016\001\002\000\004\076" +
    "\uffe9\001\002\000\032\002\ufffa\004\011\005\026\006\022" +
    "\007\013\015\024\016\006\024\023\025\005\076\014\100" +
    "\004\101\016\001\002\000\004\043\031\001\002\000\022" +
    "\015\024\016\006\052\034\053\035\076\037\100\004\101" +
    "\016\102\040\001\002\000\034\002\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\015\uffdf\016\uffdf\024\uffdf\025\uffdf\065" +
    "\146\076\uffdf\100\uffdf\101\uffdf\001\002\000\034\002\uffde" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\015\uffde\016\uffde\024" +
    "\uffde\025\uffde\065\145\076\uffde\100\uffde\101\uffde\001\002" +
    "\000\004\076\143\001\002\000\004\076\141\001\002\000" +
    "\032\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\015\uffdc" +
    "\016\uffdc\024\uffdc\025\uffdc\076\uffdc\100\uffdc\101\uffdc\001" +
    "\002\000\042\044\053\045\060\046\045\047\050\050\062" +
    "\051\044\052\130\053\127\054\051\055\057\056\052\057" +
    "\055\060\056\061\047\062\065\063\067\001\002\000\036" +
    "\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\015\uffe0\016" +
    "\uffe0\024\uffe0\025\uffe0\044\123\065\122\076\uffe0\100\uffe0" +
    "\101\uffe0\001\002\000\064\002\uffe2\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\015\uffe2\016\uffe2\024\uffe2\025\uffe2\044\053" +
    "\045\060\046\045\047\050\050\062\051\044\054\051\055" +
    "\057\056\052\057\055\060\056\061\047\065\054\076\uffe2" +
    "\100\uffe2\101\uffe2\001\002\000\034\002\uffdd\004\uffdd\005" +
    "\uffdd\006\uffdd\007\uffdd\015\uffdd\016\uffdd\024\uffdd\025\uffdd" +
    "\065\043\076\uffdd\100\uffdd\101\uffdd\001\002\000\032\002" +
    "\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\015\uffd9\016\uffd9" +
    "\024\uffd9\025\uffd9\076\uffd9\100\uffd9\101\uffd9\001\002\000" +
    "\016\015\uffbe\016\uffbe\066\uffbe\076\uffbe\100\uffbe\101\uffbe" +
    "\001\002\000\016\015\uffc1\016\uffc1\066\uffc1\076\uffc1\100" +
    "\uffc1\101\uffc1\001\002\000\016\015\024\016\006\066\103" +
    "\076\106\100\004\101\016\001\002\000\014\015\uffa6\016" +
    "\uffa6\076\uffa6\100\uffa6\101\uffa6\001\002\000\016\015\uffc0" +
    "\016\uffc0\066\uffc0\076\uffc0\100\uffc0\101\uffc0\001\002\000" +
    "\014\015\uffab\016\uffab\076\uffab\100\uffab\101\uffab\001\002" +
    "\000\014\015\uffa9\016\uffa9\076\uffa9\100\uffa9\101\uffa9\001" +
    "\002\000\016\015\uffc3\016\uffc3\066\uffc3\076\uffc3\100\uffc3" +
    "\101\uffc3\001\002\000\032\002\uffe3\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\015\uffe3\016\uffe3\024\uffe3\025\uffe3\076\uffe3" +
    "\100\uffe3\101\uffe3\001\002\000\014\015\uffa8\016\uffa8\076" +
    "\uffa8\100\uffa8\101\uffa8\001\002\000\014\015\uffa7\016\uffa7" +
    "\076\uffa7\100\uffa7\101\uffa7\001\002\000\014\015\uffaa\016" +
    "\uffaa\076\uffaa\100\uffaa\101\uffaa\001\002\000\016\015\uffc2" +
    "\016\uffc2\066\uffc2\076\uffc2\100\uffc2\101\uffc2\001\002\000" +
    "\014\015\024\016\006\076\064\100\004\101\016\001\002" +
    "\000\016\015\uffbf\016\uffbf\066\uffbf\076\uffbf\100\uffbf\101" +
    "\uffbf\001\002\000\040\002\uffb3\004\uffb3\005\uffb3\006\uffb3" +
    "\007\uffb3\015\uffb3\016\uffb3\024\uffb3\025\uffb3\062\065\063" +
    "\067\065\uffb3\076\uffb3\100\uffb3\101\uffb3\001\002\000\040" +
    "\002\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\015\uffb2\016" +
    "\uffb2\024\uffb2\025\uffb2\062\065\063\067\065\uffb2\076\uffb2" +
    "\100\uffb2\101\uffb2\001\002\000\016\015\uffbd\016\uffbd\066" +
    "\uffbd\076\uffbd\100\uffbd\101\uffbd\001\002\000\014\015\024" +
    "\016\006\076\071\100\004\101\016\001\002\000\016\015" +
    "\uffbc\016\uffbc\066\uffbc\076\uffbc\100\uffbc\101\uffbc\001\002" +
    "\000\034\002\uffae\004\uffae\005\uffae\006\uffae\007\uffae\015" +
    "\uffae\016\uffae\024\uffae\025\uffae\065\uffae\076\uffae\100\uffae" +
    "\101\uffae\001\002\000\016\054\051\055\057\056\052\057" +
    "\055\060\056\061\047\001\002\000\014\015\024\016\006" +
    "\076\074\100\004\101\016\001\002\000\040\002\uffb0\004" +
    "\uffb0\005\uffb0\006\uffb0\007\uffb0\015\uffb0\016\uffb0\024\uffb0" +
    "\025\uffb0\062\065\063\067\065\uffb0\076\uffb0\100\uffb0\101" +
    "\uffb0\001\002\000\040\002\uffb1\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\015\uffb1\016\uffb1\024\uffb1\025\uffb1\062\065\063" +
    "\067\065\uffb1\076\uffb1\100\uffb1\101\uffb1\001\002\000\014" +
    "\015\024\016\006\076\071\100\004\101\016\001\002\000" +
    "\034\002\uffad\004\uffad\005\uffad\006\uffad\007\uffad\015\uffad" +
    "\016\uffad\024\uffad\025\uffad\065\uffad\076\uffad\100\uffad\101" +
    "\uffad\001\002\000\014\015\024\016\006\076\071\100\004" +
    "\101\016\001\002\000\034\002\uffac\004\uffac\005\uffac\006" +
    "\uffac\007\uffac\015\uffac\016\uffac\024\uffac\025\uffac\065\uffac" +
    "\076\uffac\100\uffac\101\uffac\001\002\000\014\015\024\016" +
    "\006\076\071\100\004\101\016\001\002\000\034\002\uffaf" +
    "\004\uffaf\005\uffaf\006\uffaf\007\uffaf\015\uffaf\016\uffaf\024" +
    "\uffaf\025\uffaf\065\uffaf\076\uffaf\100\uffaf\101\uffaf\001\002" +
    "\000\014\015\024\016\006\076\116\100\004\101\016\001" +
    "\002\000\052\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\015\uffcc\016\uffcc\024\uffcc\025\uffcc\044\053\045\060\046" +
    "\045\047\050\050\062\051\044\065\uffcc\067\uffcc\076\uffcc" +
    "\100\uffcc\101\uffcc\001\002\000\036\002\uffce\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\015\uffce\016\uffce\024\uffce\025\uffce" +
    "\065\uffce\067\uffce\076\uffce\100\uffce\101\uffce\001\002\000" +
    "\052\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\015\uffcb" +
    "\016\uffcb\024\uffcb\025\uffcb\044\053\045\060\046\045\047" +
    "\050\050\062\051\044\065\uffcb\067\uffcb\076\uffcb\100\uffcb" +
    "\101\uffcb\001\002\000\016\015\024\016\006\066\110\076" +
    "\113\100\004\101\016\001\002\000\014\015\024\016\006" +
    "\076\116\100\004\101\016\001\002\000\052\002\uffca\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\015\uffca\016\uffca\024\uffca" +
    "\025\uffca\044\053\045\060\046\045\047\050\050\062\051" +
    "\044\065\uffca\067\uffca\076\uffca\100\uffca\101\uffca\001\002" +
    "\000\036\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\015" +
    "\uffcd\016\uffcd\024\uffcd\025\uffcd\065\uffcd\067\uffcd\076\uffcd" +
    "\100\uffcd\101\uffcd\001\002\000\052\002\uffc9\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\015\uffc9\016\uffc9\024\uffc9\025\uffc9" +
    "\044\053\045\060\046\045\047\050\050\062\051\044\065" +
    "\uffc9\067\uffc9\076\uffc9\100\uffc9\101\uffc9\001\002\000\016" +
    "\044\053\045\060\046\045\047\050\050\062\051\044\001" +
    "\002\000\004\067\117\001\002\000\016\044\053\045\060" +
    "\046\045\047\050\050\062\051\044\001\002\000\036\002" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\015\uffc7\016\uffc7" +
    "\024\uffc7\025\uffc7\065\uffc7\067\uffc7\076\uffc7\100\uffc7\101" +
    "\uffc7\001\002\000\004\067\121\001\002\000\036\002\uffc8" +
    "\004\uffc8\005\uffc8\006\uffc8\007\uffc8\015\uffc8\016\uffc8\024" +
    "\uffc8\025\uffc8\065\uffc8\067\uffc8\076\uffc8\100\uffc8\101\uffc8" +
    "\001\002\000\032\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\015\uffe1\016\uffe1\024\uffe1\025\uffe1\076\uffe1\100\uffe1" +
    "\101\uffe1\001\002\000\004\102\125\001\002\000\032\002" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\015\uffd0\016\uffd0" +
    "\024\uffd0\025\uffd0\076\uffd0\100\uffd0\101\uffd0\001\002\000" +
    "\034\002\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\015\uffcf" +
    "\016\uffcf\024\uffcf\025\uffcf\044\123\076\uffcf\100\uffcf\101" +
    "\uffcf\001\002\000\006\066\133\076\134\001\002\000\034" +
    "\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\015\uffd1\016" +
    "\uffd1\024\uffd1\025\uffd1\065\132\076\uffd1\100\uffd1\101\uffd1" +
    "\001\002\000\034\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\015\uffd3\016\uffd3\024\uffd3\025\uffd3\065\131\076\uffd3" +
    "\100\uffd3\101\uffd3\001\002\000\032\002\uffd7\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\015\uffd7\016\uffd7\024\uffd7\025\uffd7" +
    "\076\uffd7\100\uffd7\101\uffd7\001\002\000\032\002\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\015\uffd5\016\uffd5\024\uffd5" +
    "\025\uffd5\076\uffd5\100\uffd5\101\uffd5\001\002\000\004\076" +
    "\136\001\002\000\042\002\uffc5\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\015\uffc5\016\uffc5\024\uffc5\025\uffc5\062\065\063" +
    "\067\065\uffc5\067\uffc5\076\uffc5\100\uffc5\101\uffc5\001\002" +
    "\000\036\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\015" +
    "\uffc6\016\uffc6\024\uffc6\025\uffc6\065\uffc6\067\uffc6\076\uffc6" +
    "\100\uffc6\101\uffc6\001\002\000\006\062\065\063\067\001" +
    "\002\000\004\067\140\001\002\000\036\002\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\015\uffc4\016\uffc4\024\uffc4\025" +
    "\uffc4\065\uffc4\067\uffc4\076\uffc4\100\uffc4\101\uffc4\001\002" +
    "\000\034\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\015" +
    "\uffd2\016\uffd2\024\uffd2\025\uffd2\065\142\076\uffd2\100\uffd2" +
    "\101\uffd2\001\002\000\032\002\uffd6\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\015\uffd6\016\uffd6\024\uffd6\025\uffd6\076\uffd6" +
    "\100\uffd6\101\uffd6\001\002\000\034\002\uffd4\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\015\uffd4\016\uffd4\024\uffd4\025\uffd4" +
    "\065\144\076\uffd4\100\uffd4\101\uffd4\001\002\000\032\002" +
    "\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\015\uffd8\016\uffd8" +
    "\024\uffd8\025\uffd8\076\uffd8\100\uffd8\101\uffd8\001\002\000" +
    "\032\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\015\uffda" +
    "\016\uffda\024\uffda\025\uffda\076\uffda\100\uffda\101\uffda\001" +
    "\002\000\032\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\015\uffdb\016\uffdb\024\uffdb\025\uffdb\076\uffdb\100\uffdb\101" +
    "\uffdb\001\002\000\004\002\ufff9\001\002\000\004\002\ufffb" +
    "\001\002\000\034\002\uffb8\004\uffb8\005\uffb8\006\uffb8\007" +
    "\uffb8\015\uffb8\016\uffb8\024\uffb8\025\uffb8\074\161\076\uffb8" +
    "\100\uffb8\101\uffb8\001\002\000\034\002\uffb7\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\015\uffb7\016\uffb7\024\uffb7\025\uffb7" +
    "\074\157\076\uffb7\100\uffb7\101\uffb7\001\002\000\032\002" +
    "\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\015\uffbb\016\uffbb" +
    "\024\uffbb\025\uffbb\076\uffbb\100\uffbb\101\uffbb\001\002\000" +
    "\034\002\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\015\uffb9" +
    "\016\uffb9\024\uffb9\025\uffb9\074\155\076\uffb9\100\uffb9\101" +
    "\uffb9\001\002\000\016\015\024\016\006\076\154\100\004" +
    "\101\016\102\152\001\002\000\032\002\uffb6\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\015\uffb6\016\uffb6\024\uffb6\025\uffb6" +
    "\076\uffb6\100\uffb6\101\uffb6\001\002\000\016\015\024\016" +
    "\006\076\154\100\004\101\016\102\152\001\002\000\032" +
    "\002\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\015\uffb4\016" +
    "\uffb4\024\uffb4\025\uffb4\076\uffb4\100\uffb4\101\uffb4\001\002" +
    "\000\016\015\024\016\006\076\154\100\004\101\016\102" +
    "\152\001\002\000\032\002\uffb5\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\015\uffb5\016\uffb5\024\uffb5\025\uffb5\076\uffb5\100" +
    "\uffb5\101\uffb5\001\002\000\036\002\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\015\ufff5\016\ufff5\024\ufff5\025\ufff5\043" +
    "\170\065\167\076\ufff5\100\ufff5\101\ufff5\001\002\000\040" +
    "\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\015\uffec\016" +
    "\uffec\024\uffec\025\uffec\043\uffec\065\uffec\074\165\076\uffec" +
    "\100\uffec\101\uffec\001\002\000\004\076\164\001\002\000" +
    "\036\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\015\uffeb" +
    "\016\uffeb\024\uffeb\025\uffeb\043\uffeb\065\uffeb\076\uffeb\100" +
    "\uffeb\101\uffeb\001\002\000\032\002\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\015\ufff6\016\ufff6\024\ufff6\025\ufff6\076" +
    "\ufff6\100\ufff6\101\ufff6\001\002\000\014\015\024\016\006" +
    "\100\004\101\016\102\172\001\002\000\034\002\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\015\ufff3\016\ufff3\024\ufff3" +
    "\025\ufff3\065\174\076\ufff3\100\ufff3\101\ufff3\001\002\000" +
    "\034\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\015\ufff1" +
    "\016\ufff1\024\ufff1\025\ufff1\065\173\076\ufff1\100\ufff1\101" +
    "\ufff1\001\002\000\032\002\ufff2\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\015\ufff2\016\ufff2\024\ufff2\025\ufff2\076\ufff2\100" +
    "\ufff2\101\ufff2\001\002\000\032\002\ufff4\004\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\015\ufff4\016\ufff4\024\ufff4\025\ufff4\076" +
    "\ufff4\100\ufff4\101\ufff4\001\002\000\004\002\ufffd\001\002" +
    "\000\036\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\015" +
    "\uffef\016\uffef\024\uffef\025\uffef\043\200\065\177\076\uffef" +
    "\100\uffef\101\uffef\001\002\000\032\002\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\015\ufff0\016\ufff0\024\ufff0\025\ufff0" +
    "\076\ufff0\100\ufff0\101\ufff0\001\002\000\012\015\024\016" +
    "\006\100\004\101\016\001\002\000\034\002\uffed\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\015\uffed\016\uffed\024\uffed\025" +
    "\uffed\065\202\076\uffed\100\uffed\101\uffed\001\002\000\032" +
    "\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\015\uffee\016" +
    "\uffee\024\uffee\025\uffee\076\uffee\100\uffee\101\uffee\001\002" +
    "\000\004\002\001\001\002\000\004\002\ufffe\001\002\000" +
    "\032\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba\015\uffba" +
    "\016\uffba\024\uffba\025\uffba\076\uffba\100\uffba\101\uffba\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\026\002\011\003\014\004\027\005\017\006" +
    "\016\007\006\012\024\015\007\016\020\022\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\203\003\014\004\027\005\017" +
    "\006\016\007\006\012\024\015\007\016\020\022\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\060\001\001\000\004\004\175\001\001" +
    "\000\026\002\174\003\014\004\027\005\017\006\016\007" +
    "\006\012\024\015\007\016\020\022\026\001\001\000\004" +
    "\004\162\001\001\000\006\006\150\013\152\001\001\000" +
    "\002\001\001\000\026\002\147\003\014\004\027\005\017" +
    "\006\016\007\006\012\024\015\007\016\020\022\026\001" +
    "\001\000\002\001\001\000\026\002\146\003\014\004\027" +
    "\005\017\006\016\007\006\012\024\015\007\016\020\022" +
    "\026\001\001\000\002\001\001\000\014\006\040\017\031" +
    "\020\032\021\035\022\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\106\011\125\014\071\001\001\000" +
    "\002\001\001\000\006\010\045\014\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\103\017\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\062\001\001\000\002\001\001\000\004\011\100\001\001" +
    "\000\004\011\065\001\001\000\002\001\001\000\006\006" +
    "\016\022\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\071\001\001\000\004\006\072\001\001\000" +
    "\004\011\076\001\001\000\004\011\074\001\001\000\006" +
    "\006\016\022\075\001\001\000\002\001\001\000\006\006" +
    "\016\022\077\001\001\000\002\001\001\000\006\006\016" +
    "\022\101\001\001\000\002\001\001\000\006\006\113\017" +
    "\117\001\001\000\004\010\045\001\001\000\002\001\001" +
    "\000\004\010\106\001\001\000\006\006\110\017\111\001" +
    "\001\000\006\006\113\017\114\001\001\000\004\010\045" +
    "\001\001\000\002\001\001\000\004\010\106\001\001\000" +
    "\004\010\045\001\001\000\002\001\001\000\004\010\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\136\001\001\000\004\011\125\001" +
    "\001\000\002\001\001\000\004\011\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\150\013\155\001\001\000\002\001" +
    "\001\000\006\006\150\013\157\001\001\000\002\001\001" +
    "\000\006\006\150\013\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERANDO_CONDICION ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERANDO_CONDICION ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERANDO_CONDICION ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERANDO_CONDICION ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERANDO_CONDICION ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERANDO_CONDICION ::= Comparador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICION ::= Identificador OPERANDO_CONDICION VALOR_N OPERANDO_LOGICO CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICION ::= Identificador OPERANDO_CONDICION Identificador OPERANDO_LOGICO CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICION ::= VALOR_N OPERANDO_CONDICION Identificador OPERANDO_LOGICO CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICION ::= VALOR_N OPERANDO_CONDICION VALOR_N OPERANDO_LOGICO CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICION ::= Identificador OPERANDO_CONDICION VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDICION ::= Identificador OPERANDO_CONDICION Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONDICION ::= VALOR_N OPERANDO_CONDICION Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONDICION ::= VALOR_N OPERANDO_CONDICION VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SAL ::= CadenaT Coma SAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SAL ::= VALOR_N Coma SAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SAL ::= Identificador Coma SAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SAL ::= CadenaT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SAL ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SAL ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E_S ::= Leer Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E_S",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E_S ::= Escribir SAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E_S",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERANDO_LOGICO ::= Or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERANDO_LOGICO ::= And 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERANDO ::= Exponenciacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERANDO ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERANDO ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERANDO ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERANDO ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERANDO ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION_LOGICA ::= Identificador OPERANDO_LOGICO ParentesisA OPERACION_LOGICA ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION_LOGICA ::= Identificador OPERANDO_LOGICO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACION_LOGICA ::= Identificador OPERANDO_LOGICO OPERACION_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACION ::= Identificador OPERANDO ParentesisA OPERACION ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACION ::= VALOR_N OPERANDO ParentesisA OPERACION ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACION ::= Identificador OPERANDO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION ::= Identificador OPERANDO VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACION ::= VALOR_N OPERANDO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACION ::= VALOR_N OPERANDO VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACION ::= Identificador OPERANDO OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACION ::= VALOR_N OPERANDO OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CON_CADENAS ::= CadenaT Suma CadenaT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CON_CADENAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CON_CADENAS ::= CadenaT Suma CON_CADENAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CON_CADENAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= VAR Igual Identificador Decremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACION ::= VAR Igual Decremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACION ::= VAR Igual Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION ::= VAR Igual Incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION ::= VAR Igual Identificador Decremento PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION ::= VAR Igual Decremento Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION ::= VAR Igual Identificador Incremento PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION ::= VAR Igual Incremento Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= VAR Igual CONDICION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= VAR Igual OPERACION_LOGICA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= VAR Igual OPERACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION ::= VAR Igual CON_CADENAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= VAR Igual CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= VAR Igual OPERACION_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION ::= VAR Igual OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION ::= VAR Igual CadenaT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION ::= VAR Igual CadenaT PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION ::= VAR Igual VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNACION ::= VAR Igual VALOR_N PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALOR_N ::= Falso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_N",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR_N ::= Verdadero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_N",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR_N ::= NumReal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_N",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR_N ::= NumEntero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_N",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_N ::= Boleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_N",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_N ::= Real 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_N",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_N ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_N",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VAR ::= Identificador Coma VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VAR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_NUM ::= TIPO_N VAR Igual VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_NUM",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_NUM ::= TIPO_N VAR Igual VALOR_N PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_NUM",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_NUM ::= TIPO_N VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_NUM",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_NUM ::= TIPO_N VAR PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_NUM",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION_CADENA ::= Cadena VAR Igual CadenaT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION_CADENA ::= Cadena VAR Igual CadenaT PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION_CADENA ::= Cadena VAR Igual VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION_CADENA ::= Cadena VAR Igual VALOR_N PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION_CADENA ::= Cadena VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION_CADENA ::= Cadena VAR PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= DECLARACION_CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= DECLARACION_NUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CODIGO ::= CONDICION CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CODIGO ::= CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODIGO ::= E_S CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CODIGO ::= E_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODIGO ::= ASIGNACION CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= DECLARACION CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CODIGO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CODIGO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

