
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 08 20:11:06 CST 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 08 20:11:06 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\022\006\000\002\002" +
    "\003\000\002\002\003\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\002\004\000\002\002\003\000" +
    "\002\002\004\000\002\002\003\000\002\002\004\000\002" +
    "\002\003\000\002\002\004\000\002\023\003\000\002\023" +
    "\003\000\002\007\005\000\002\007\004\000\002\007\007" +
    "\000\002\007\006\000\002\007\007\000\002\007\006\000" +
    "\002\003\005\000\002\003\004\000\002\003\007\000\002" +
    "\003\006\000\002\004\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\024\006\000" +
    "\002\024\005\000\002\024\006\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\006\000\002\024\006\000\002\024\006" +
    "\000\002\024\007\000\002\024\007\000\002\024\007\000" +
    "\002\024\007\000\002\024\006\000\002\024\006\000\002" +
    "\024\006\000\002\024\006\000\002\027\005\000\002\027" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\007\000\002\025\007\000\002\026\005\000\002" +
    "\026\005\000\002\026\007\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\003\000\002\011\003\000" +
    "\002\012\004\000\002\012\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\030\005\000\002\030\007" +
    "\000\002\016\003\000\002\016\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\031\010\000\002\031" +
    "\011\000\002\015\010\000\002\015\011\000\002\015\005" +
    "\000\002\032\010\000\002\032\010\000\002\032\012\000" +
    "\002\032\012\000\002\032\012\000\002\032\012\000\002" +
    "\017\004\000\002\017\004\000\002\017\005\000\002\017" +
    "\005\000\002\033\006\000\002\020\011\000\002\020\014" +
    "\000\002\020\010\000\002\020\013\000\002\021\003\000" +
    "\002\021\005\000\002\034\004\000\002\034\005\000\002" +
    "\035\003\000\002\035\004\000\002\036\012\000\002\036" +
    "\011\000\002\036\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\004\030\005\001\002\000\012\004\020\005" +
    "\013\006\016\007\012\001\002\000\004\102\010\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\014\004\uff8f\005\uff8f\006\uff8f\007\uff8f\030\005\001\002" +
    "\000\012\004\uff8e\005\uff8e\006\uff8e\007\uff8e\001\002\000" +
    "\004\076\uffe4\001\002\000\004\076\uffe5\001\002\000\004" +
    "\075\132\001\002\000\004\066\046\001\002\000\004\076" +
    "\026\001\002\000\004\076\026\001\002\000\004\076\uffe6" +
    "\001\002\000\040\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011" +
    "\ufff2\014\ufff2\017\ufff2\020\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\066\ufff2\067\ufff2\074\ufff2\076\ufff2\001\002\000\040\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\014\ufff3\017\ufff3" +
    "\020\ufff3\023\ufff3\024\ufff3\025\ufff3\066\ufff3\067\ufff3\074" +
    "\ufff3\076\ufff3\001\002\000\014\004\020\005\013\006\016" +
    "\007\012\075\uff8d\001\002\000\004\075\uff8c\001\002\000" +
    "\044\004\uffea\005\uffea\006\uffea\007\uffea\011\uffea\014\uffea" +
    "\017\uffea\020\uffea\023\uffea\024\uffea\025\uffea\043\030\065" +
    "\027\066\uffea\067\uffea\074\uffea\076\uffea\001\002\000\044" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\014\uffe7\017" +
    "\uffe7\020\uffe7\023\uffe7\024\uffe7\025\uffe7\043\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\074\uffe7\076\uffe7\001\002\000\040\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\014\uffeb\017\uffeb" +
    "\020\uffeb\023\uffeb\024\uffeb\025\uffeb\066\uffeb\067\uffeb\074" +
    "\uffeb\076\uffeb\001\002\000\012\015\031\016\032\100\033" +
    "\101\035\001\002\000\112\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\065" +
    "\uffe1\066\uffe1\067\uffe1\074\uffe1\075\uffe1\076\uffe1\103\uffe1" +
    "\001\002\000\112\004\uffe0\005\uffe0\006\uffe0\007\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\065\uffe0\066" +
    "\uffe0\067\uffe0\074\uffe0\075\uffe0\076\uffe0\103\uffe0\001\002" +
    "\000\112\004\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\044\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\063\uffe3\065\uffe3\066\uffe3\067" +
    "\uffe3\074\uffe3\075\uffe3\076\uffe3\103\uffe3\001\002\000\042" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8\014\uffe8\017" +
    "\uffe8\020\uffe8\023\uffe8\024\uffe8\025\uffe8\065\036\066\uffe8" +
    "\067\uffe8\074\uffe8\076\uffe8\001\002\000\112\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\065\uffe2\066\uffe2\067\uffe2\074\uffe2\075\uffe2" +
    "\076\uffe2\103\uffe2\001\002\000\040\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\011\uffe9\014\uffe9\017\uffe9\020\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\066\uffe9\067\uffe9\074\uffe9\076\uffe9\001" +
    "\002\000\044\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0" +
    "\014\ufff0\017\ufff0\020\ufff0\023\ufff0\024\ufff0\025\ufff0\043" +
    "\041\065\040\066\ufff0\067\ufff0\074\ufff0\076\ufff0\001\002" +
    "\000\040\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\014" +
    "\ufff1\017\ufff1\020\ufff1\023\ufff1\024\ufff1\025\ufff1\066\ufff1" +
    "\067\ufff1\074\ufff1\076\ufff1\001\002\000\014\015\031\016" +
    "\032\100\033\101\035\102\043\001\002\000\042\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\011\uffee\014\uffee\017\uffee\020" +
    "\uffee\023\uffee\024\uffee\025\uffee\065\045\066\uffee\067\uffee" +
    "\074\uffee\076\uffee\001\002\000\042\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\011\uffec\014\uffec\017\uffec\020\uffec\023\uffec" +
    "\024\uffec\025\uffec\065\044\066\uffec\067\uffec\074\uffec\076" +
    "\uffec\001\002\000\040\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\011\uffed\014\uffed\017\uffed\020\uffed\023\uffed\024\uffed\025" +
    "\uffed\066\uffed\067\uffed\074\uffed\076\uffed\001\002\000\040" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\014\uffef\017" +
    "\uffef\020\uffef\023\uffef\024\uffef\025\uffef\066\uffef\067\uffef" +
    "\074\uffef\076\uffef\001\002\000\014\004\020\005\013\006" +
    "\016\007\012\067\050\001\002\000\006\067\uff91\074\130" +
    "\001\002\000\004\103\121\001\002\000\004\067\052\001" +
    "\002\000\004\103\053\001\002\000\004\014\054\001\002" +
    "\000\014\015\031\016\032\076\057\100\033\101\035\001" +
    "\002\000\016\044\065\045\064\046\066\047\060\050\062" +
    "\051\067\001\002\000\014\004\uff95\005\uff95\006\uff95\007" +
    "\uff95\075\uff95\001\002\000\020\044\065\045\064\046\066" +
    "\047\060\050\062\051\067\066\061\001\002\000\016\015" +
    "\uffbc\016\uffbc\066\uffbc\076\uffbc\100\uffbc\101\uffbc\001\002" +
    "\000\016\015\031\016\032\076\111\100\033\101\035\102" +
    "\107\001\002\000\016\015\uffbb\016\uffbb\066\uffbb\076\uffbb" +
    "\100\uffbb\101\uffbb\001\002\000\016\015\031\016\032\066" +
    "\070\076\073\100\033\101\035\001\002\000\016\015\uffbe" +
    "\016\uffbe\066\uffbe\076\uffbe\100\uffbe\101\uffbe\001\002\000" +
    "\016\015\uffbf\016\uffbf\066\uffbf\076\uffbf\100\uffbf\101\uffbf" +
    "\001\002\000\016\015\uffbd\016\uffbd\066\uffbd\076\uffbd\100" +
    "\uffbd\101\uffbd\001\002\000\016\015\uffba\016\uffba\066\uffba" +
    "\076\uffba\100\uffba\101\uffba\001\002\000\014\015\031\016" +
    "\032\076\102\100\033\101\035\001\002\000\056\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\011\uffc6\014\uffc6\017\uffc6\020" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\044\065\045\064\046\066" +
    "\047\060\050\062\051\067\065\uffc6\067\uffc6\075\uffc6\076" +
    "\uffc6\103\uffc6\001\002\000\042\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\011\uffc9\014\uffc9\017\uffc9\020\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\065\uffc9\067\uffc9\075\uffc9\076\uffc9\103\uffc9" +
    "\001\002\000\056\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011" +
    "\uffc5\014\uffc5\017\uffc5\020\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\044\065\045\064\046\066\047\060\050\062\051\067\065" +
    "\uffc5\067\uffc5\075\uffc5\076\uffc5\103\uffc5\001\002\000\016" +
    "\015\031\016\032\066\075\076\100\100\033\101\035\001" +
    "\002\000\014\015\031\016\032\076\102\100\033\101\035" +
    "\001\002\000\056\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011" +
    "\uffc8\014\uffc8\017\uffc8\020\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\044\065\045\064\046\066\047\060\050\062\051\067\065" +
    "\uffc8\067\uffc8\075\uffc8\076\uffc8\103\uffc8\001\002\000\042" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\011\uffca\014\uffca\017" +
    "\uffca\020\uffca\023\uffca\024\uffca\025\uffca\065\uffca\067\uffca" +
    "\075\uffca\076\uffca\103\uffca\001\002\000\056\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\011\uffc7\014\uffc7\017\uffc7\020\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\044\065\045\064\046\066\047" +
    "\060\050\062\051\067\065\uffc7\067\uffc7\075\uffc7\076\uffc7" +
    "\103\uffc7\001\002\000\004\067\103\001\002\000\016\044" +
    "\065\045\064\046\066\047\060\050\062\051\067\001\002" +
    "\000\042\004\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4\014" +
    "\uffc4\017\uffc4\020\uffc4\023\uffc4\024\uffc4\025\uffc4\065\uffc4" +
    "\067\uffc4\075\uffc4\076\uffc4\103\uffc4\001\002\000\004\067" +
    "\105\001\002\000\042\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\011\uffc3\014\uffc3\017\uffc3\020\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\065\uffc3\067\uffc3\075\uffc3\076\uffc3\103\uffc3\001\002" +
    "\000\040\004\uffb4\005\uffb4\006\uffb4\007\uffb4\011\uffb4\014" +
    "\uffb4\017\uffb4\020\uffb4\023\uffb4\024\uffb4\025\uffb4\067\uffb4" +
    "\074\117\076\uffb4\103\uffb4\001\002\000\040\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\011\uffb3\014\uffb3\017\uffb3\020\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\067\uffb3\074\115\076\uffb3\103" +
    "\uffb3\001\002\000\004\067\114\001\002\000\040\004\uffb5" +
    "\005\uffb5\006\uffb5\007\uffb5\011\uffb5\014\uffb5\017\uffb5\020" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\067\uffb5\074\112\076\uffb5" +
    "\103\uffb5\001\002\000\016\015\031\016\032\076\111\100" +
    "\033\101\035\102\107\001\002\000\036\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\011\uffb2\014\uffb2\017\uffb2\020\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\067\uffb2\076\uffb2\103\uffb2\001\002" +
    "\000\014\004\uff94\005\uff94\006\uff94\007\uff94\075\uff94\001" +
    "\002\000\016\015\031\016\032\076\111\100\033\101\035" +
    "\102\107\001\002\000\036\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\011\uffb0\014\uffb0\017\uffb0\020\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\067\uffb0\076\uffb0\103\uffb0\001\002\000\016\015" +
    "\031\016\032\076\111\100\033\101\035\102\107\001\002" +
    "\000\036\004\uffb1\005\uffb1\006\uffb1\007\uffb1\011\uffb1\014" +
    "\uffb1\017\uffb1\020\uffb1\023\uffb1\024\uffb1\025\uffb1\067\uffb1" +
    "\076\uffb1\103\uffb1\001\002\000\004\014\122\001\002\000" +
    "\014\015\031\016\032\076\124\100\033\101\035\001\002" +
    "\000\014\004\uff93\005\uff93\006\uff93\007\uff93\075\uff93\001" +
    "\002\000\020\044\065\045\064\046\066\047\060\050\062" +
    "\051\067\066\125\001\002\000\016\015\031\016\032\076" +
    "\111\100\033\101\035\102\107\001\002\000\004\067\127" +
    "\001\002\000\014\004\uff92\005\uff92\006\uff92\007\uff92\075" +
    "\uff92\001\002\000\012\004\020\005\013\006\016\007\012" +
    "\001\002\000\004\067\uff90\001\002\000\006\002\uff89\004" +
    "\134\001\002\000\004\002\000\001\002\000\004\036\135" +
    "\001\002\000\004\066\136\001\002\000\014\004\020\005" +
    "\013\006\016\007\012\067\137\001\002\000\026\004\020" +
    "\005\013\006\016\007\012\011\142\017\151\023\153\024" +
    "\154\025\143\076\026\001\002\000\004\067\141\001\002" +
    "\000\026\004\020\005\013\006\016\007\012\011\142\017" +
    "\151\023\153\024\154\025\143\076\026\001\002\000\014" +
    "\015\031\016\032\076\211\100\033\101\035\001\002\000" +
    "\004\076\312\001\002\000\030\004\020\005\013\006\016" +
    "\007\012\011\142\014\uffff\017\151\023\153\024\154\025" +
    "\143\076\026\001\002\000\004\014\307\001\002\000\030" +
    "\004\020\005\013\006\016\007\012\011\142\014\ufff9\017" +
    "\151\023\153\024\154\025\143\076\026\001\002\000\030" +
    "\004\020\005\013\006\016\007\012\011\142\014\ufff7\017" +
    "\151\023\153\024\154\025\143\076\026\001\002\000\030" +
    "\004\020\005\013\006\016\007\012\011\142\014\ufff5\017" +
    "\151\023\153\024\154\025\143\076\026\001\002\000\014" +
    "\004\020\005\013\006\016\007\012\076\253\001\002\000" +
    "\030\004\020\005\013\006\016\007\012\011\142\014\ufffe" +
    "\017\151\023\153\024\154\025\143\076\026\001\002\000" +
    "\004\103\241\001\002\000\016\015\031\016\032\076\111" +
    "\100\033\101\035\102\107\001\002\000\030\004\020\005" +
    "\013\006\016\007\012\011\142\014\ufffb\017\151\023\153" +
    "\024\154\025\143\076\026\001\002\000\004\043\157\001" +
    "\002\000\022\015\031\016\032\052\162\053\163\076\165" +
    "\100\033\101\035\102\167\001\002\000\036\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\011\uffdb\014\uffdb\017\uffdb\020\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\065\236\076\uffdb\103\uffdb\001" +
    "\002\000\036\004\uffda\005\uffda\006\uffda\007\uffda\011\uffda" +
    "\014\uffda\017\uffda\020\uffda\023\uffda\024\uffda\025\uffda\065" +
    "\235\076\uffda\103\uffda\001\002\000\004\076\233\001\002" +
    "\000\004\076\231\001\002\000\034\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\011\uffd8\014\uffd8\017\uffd8\020\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\076\uffd8\103\uffd8\001\002\000\042\044" +
    "\065\045\064\046\066\047\060\050\062\051\067\052\216" +
    "\053\217\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061" +
    "\uffac\062\212\063\214\001\002\000\016\054\202\055\205" +
    "\056\206\057\204\060\201\061\200\001\002\000\040\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc\014\uffdc\017\uffdc" +
    "\020\uffdc\023\uffdc\024\uffdc\025\uffdc\044\175\065\174\076" +
    "\uffdc\103\uffdc\001\002\000\066\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\011\uffde\014\uffde\017\uffde\020\uffde\023\uffde\024" +
    "\uffde\025\uffde\044\065\045\064\046\066\047\060\050\062" +
    "\051\067\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061" +
    "\uffad\065\173\076\uffde\103\uffde\001\002\000\036\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\011\uffd9\014\uffd9\017\uffd9\020" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\065\172\076\uffd9\103\uffd9" +
    "\001\002\000\034\004\uffd5\005\uffd5\006\uffd5\007\uffd5\011" +
    "\uffd5\014\uffd5\017\uffd5\020\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\076\uffd5\103\uffd5\001\002\000\034\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\011\uffdf\014\uffdf\017\uffdf\020\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\076\uffdf\103\uffdf\001\002\000\034\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\014\uffdd\017\uffdd" +
    "\020\uffdd\023\uffdd\024\uffdd\025\uffdd\076\uffdd\103\uffdd\001" +
    "\002\000\004\102\177\001\002\000\034\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\011\uffcc\014\uffcc\017\uffcc\020\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\076\uffcc\103\uffcc\001\002\000\036" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\014\uffcb\017" +
    "\uffcb\020\uffcb\023\uffcb\024\uffcb\025\uffcb\044\175\076\uffcb" +
    "\103\uffcb\001\002\000\014\015\uffa6\016\uffa6\076\uffa6\100" +
    "\uffa6\101\uffa6\001\002\000\014\015\uffa7\016\uffa7\076\uffa7" +
    "\100\uffa7\101\uffa7\001\002\000\014\015\uffab\016\uffab\076" +
    "\uffab\100\uffab\101\uffab\001\002\000\014\015\031\016\032" +
    "\076\211\100\033\101\035\001\002\000\014\015\uffa8\016" +
    "\uffa8\076\uffa8\100\uffa8\101\uffa8\001\002\000\014\015\uffaa" +
    "\016\uffaa\076\uffaa\100\uffaa\101\uffaa\001\002\000\014\015" +
    "\uffa9\016\uffa9\076\uffa9\100\uffa9\101\uffa9\001\002\000\064" +
    "\004\uffad\005\uffad\006\uffad\007\uffad\011\uffad\012\uffad\014" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\025\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061" +
    "\uffad\062\uffad\063\uffad\065\uffad\076\uffad\103\uffad\001\002" +
    "\000\050\004\uffaf\005\uffaf\006\uffaf\007\uffaf\011\uffaf\012" +
    "\uffaf\014\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\062\212\063\214\065\uffaf\076\uffaf\103" +
    "\uffaf\001\002\000\064\004\uffac\005\uffac\006\uffac\007\uffac" +
    "\011\uffac\012\uffac\014\uffac\017\uffac\020\uffac\021\uffac\022" +
    "\uffac\023\uffac\024\uffac\025\uffac\054\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\065\uffac\076" +
    "\uffac\103\uffac\001\002\000\016\015\uffb9\016\uffb9\066\uffb9" +
    "\076\uffb9\100\uffb9\101\uffb9\001\002\000\014\015\031\016" +
    "\032\076\211\100\033\101\035\001\002\000\016\015\uffb8" +
    "\016\uffb8\066\uffb8\076\uffb8\100\uffb8\101\uffb8\001\002\000" +
    "\044\004\uffae\005\uffae\006\uffae\007\uffae\011\uffae\012\uffae" +
    "\014\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\065\uffae\076\uffae\103\uffae\001\002\000\036" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\014\uffcf\017" +
    "\uffcf\020\uffcf\023\uffcf\024\uffcf\025\uffcf\065\230\076\uffcf" +
    "\103\uffcf\001\002\000\036\004\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\011\uffcd\014\uffcd\017\uffcd\020\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\065\227\076\uffcd\103\uffcd\001\002\000\006\066" +
    "\221\076\222\001\002\000\004\076\224\001\002\000\044" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\011\uffc1\014\uffc1\017" +
    "\uffc1\020\uffc1\023\uffc1\024\uffc1\025\uffc1\062\212\063\214" +
    "\065\uffc1\067\uffc1\076\uffc1\103\uffc1\001\002\000\040\004" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\011\uffc2\014\uffc2\017\uffc2" +
    "\020\uffc2\023\uffc2\024\uffc2\025\uffc2\065\uffc2\067\uffc2\076" +
    "\uffc2\103\uffc2\001\002\000\006\062\212\063\214\001\002" +
    "\000\004\067\226\001\002\000\040\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\011\uffc0\014\uffc0\017\uffc0\020\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\065\uffc0\067\uffc0\076\uffc0\103\uffc0\001" +
    "\002\000\034\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1" +
    "\014\uffd1\017\uffd1\020\uffd1\023\uffd1\024\uffd1\025\uffd1\076" +
    "\uffd1\103\uffd1\001\002\000\034\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\011\uffd3\014\uffd3\017\uffd3\020\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\076\uffd3\103\uffd3\001\002\000\036\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\011\uffce\014\uffce\017\uffce\020" +
    "\uffce\023\uffce\024\uffce\025\uffce\065\232\076\uffce\103\uffce" +
    "\001\002\000\034\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011" +
    "\uffd2\014\uffd2\017\uffd2\020\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\076\uffd2\103\uffd2\001\002\000\036\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\011\uffd0\014\uffd0\017\uffd0\020\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\065\234\076\uffd0\103\uffd0\001\002\000" +
    "\034\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\014\uffd4" +
    "\017\uffd4\020\uffd4\023\uffd4\024\uffd4\025\uffd4\076\uffd4\103" +
    "\uffd4\001\002\000\034\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\011\uffd6\014\uffd6\017\uffd6\020\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\076\uffd6\103\uffd6\001\002\000\034\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\011\uffd7\014\uffd7\017\uffd7\020\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\076\uffd7\103\uffd7\001\002\000\004" +
    "\014\ufffa\001\002\000\034\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\011\uffb7\014\uffb7\017\uffb7\020\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\076\uffb7\103\uffb7\001\002\000\010\024\154\025" +
    "\143\076\026\001\002\000\004\020\243\001\002\000\014" +
    "\015\031\016\032\076\211\100\033\101\035\001\002\000" +
    "\030\004\uff96\005\uff96\006\uff96\007\uff96\011\uff96\014\uff96" +
    "\017\uff96\023\uff96\024\uff96\025\uff96\076\uff96\001\002\000" +
    "\034\004\uff99\005\uff99\006\uff99\007\uff99\011\uff99\014\uff99" +
    "\017\uff99\020\uff99\023\uff99\024\uff99\025\uff99\076\uff99\103" +
    "\241\001\002\000\034\004\uff9a\005\uff9a\006\uff9a\007\uff9a" +
    "\011\uff9a\014\uff9a\017\uff9a\020\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\076\uff9a\103\241\001\002\000\032\004\uff98\005\uff98" +
    "\006\uff98\007\uff98\011\uff98\014\uff98\017\uff98\020\uff98\023" +
    "\uff98\024\uff98\025\uff98\076\uff98\001\002\000\032\004\uff97" +
    "\005\uff97\006\uff97\007\uff97\011\uff97\014\uff97\017\uff97\020" +
    "\uff97\023\uff97\024\uff97\025\uff97\076\uff97\001\002\000\004" +
    "\014\ufffc\001\002\000\004\020\270\001\002\000\004\020" +
    "\254\001\002\000\014\015\031\016\032\076\211\100\033" +
    "\101\035\001\002\000\010\021\257\022\256\023\260\001" +
    "\002\000\004\100\265\001\002\000\004\100\262\001\002" +
    "\000\004\103\241\001\002\000\030\004\uffa0\005\uffa0\006" +
    "\uffa0\007\uffa0\011\uffa0\014\uffa0\017\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\076\uffa0\001\002\000\004\023\263\001\002\000" +
    "\004\103\241\001\002\000\030\004\uff9c\005\uff9c\006\uff9c" +
    "\007\uff9c\011\uff9c\014\uff9c\017\uff9c\023\uff9c\024\uff9c\025" +
    "\uff9c\076\uff9c\001\002\000\004\023\266\001\002\000\004" +
    "\103\241\001\002\000\030\004\uff9e\005\uff9e\006\uff9e\007" +
    "\uff9e\011\uff9e\014\uff9e\017\uff9e\023\uff9e\024\uff9e\025\uff9e" +
    "\076\uff9e\001\002\000\014\015\031\016\032\076\211\100" +
    "\033\101\035\001\002\000\010\021\273\022\272\023\274" +
    "\001\002\000\004\100\301\001\002\000\004\100\276\001" +
    "\002\000\004\103\241\001\002\000\030\004\uff9f\005\uff9f" +
    "\006\uff9f\007\uff9f\011\uff9f\014\uff9f\017\uff9f\023\uff9f\024" +
    "\uff9f\025\uff9f\076\uff9f\001\002\000\004\023\277\001\002" +
    "\000\004\103\241\001\002\000\030\004\uff9b\005\uff9b\006" +
    "\uff9b\007\uff9b\011\uff9b\014\uff9b\017\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\076\uff9b\001\002\000\004\023\302\001\002\000" +
    "\004\103\241\001\002\000\030\004\uff9d\005\uff9d\006\uff9d" +
    "\007\uff9d\011\uff9d\014\uff9d\017\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\076\uff9d\001\002\000\004\014\ufff4\001\002\000\004" +
    "\014\ufff6\001\002\000\004\014\ufff8\001\002\000\004\100" +
    "\310\001\002\000\004\002\uff8b\001\002\000\004\014\ufffd" +
    "\001\002\000\034\004\uffb6\005\uffb6\006\uffb6\007\uffb6\011" +
    "\uffb6\014\uffb6\017\uffb6\020\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\076\uffb6\103\uffb6\001\002\000\004\012\314\001\002\000" +
    "\004\103\315\001\002\000\004\014\316\001\002\000\012" +
    "\015\031\016\032\100\033\101\035\001\002\000\032\004" +
    "\uffa5\005\uffa5\006\uffa5\007\uffa5\011\uffa5\013\320\014\uffa5" +
    "\017\uffa5\023\uffa5\024\uffa5\025\uffa5\076\uffa5\001\002\000" +
    "\016\014\322\015\031\016\032\076\211\100\033\101\035" +
    "\001\002\000\030\004\uffa4\005\uffa4\006\uffa4\007\uffa4\011" +
    "\uffa4\014\uffa4\017\uffa4\023\uffa4\024\uffa4\025\uffa4\076\uffa4" +
    "\001\002\000\012\015\031\016\032\100\033\101\035\001" +
    "\002\000\004\012\324\001\002\000\004\103\325\001\002" +
    "\000\004\014\326\001\002\000\012\015\031\016\032\100" +
    "\033\101\035\001\002\000\032\004\uffa3\005\uffa3\006\uffa3" +
    "\007\uffa3\011\uffa3\013\320\014\uffa3\017\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\076\uffa3\001\002\000\030\004\uffa2\005\uffa2" +
    "\006\uffa2\007\uffa2\011\uffa2\014\uffa2\017\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\076\uffa2\001\002\000\030\004\uffa1\005\uffa1" +
    "\006\uffa1\007\uffa1\011\uffa1\014\uffa1\017\uffa1\023\uffa1\024" +
    "\uffa1\025\uffa1\076\uffa1\001\002\000\004\014\333\001\002" +
    "\000\004\100\334\001\002\000\004\002\uff8a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\006\022\005\034\003\001\001\000\016\003" +
    "\021\005\016\007\020\020\022\023\014\035\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\036\001\001\000\004\004\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\021\005\016\007\020\020\022\023\014\035\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\021\005\016\007\020\021\050\023\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\054\025\055\001" +
    "\001\000\004\010\073\001\001\000\002\001\001\000\004" +
    "\010\062\001\001\000\002\001\001\000\006\006\105\013" +
    "\107\001\001\000\002\001\001\000\006\006\070\025\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\054\025\103\001\001" +
    "\000\004\010\073\001\001\000\002\001\001\000\004\010" +
    "\062\001\001\000\006\006\075\025\076\001\001\000\006" +
    "\006\054\025\100\001\001\000\004\010\073\001\001\000" +
    "\002\001\001\000\004\010\062\001\001\000\002\001\001" +
    "\000\004\010\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\105\013" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\105\013\115\001\001\000\002\001\001\000\006\006" +
    "\105\013\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\054\025\122\001\001\000\002\001\001\000" +
    "\004\010\062\001\001\000\006\006\105\013\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\021\005" +
    "\016\007\020\021\130\023\046\001\001\000\002\001\001" +
    "\000\004\036\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\021\005\016\007\020" +
    "\021\137\023\046\001\001\000\030\002\331\003\021\004" +
    "\155\005\016\007\020\012\154\023\143\024\151\031\145" +
    "\032\146\033\147\001\001\000\002\001\001\000\030\002" +
    "\144\003\021\004\155\005\016\007\020\012\154\023\143" +
    "\024\151\031\145\032\146\033\147\001\001\000\010\006" +
    "\206\016\165\030\312\001\001\000\002\001\001\000\030" +
    "\002\310\003\021\004\155\005\016\007\020\012\154\023" +
    "\143\024\151\031\145\032\146\033\147\001\001\000\002" +
    "\001\001\000\030\002\305\003\021\004\155\005\016\007" +
    "\020\012\154\023\143\024\151\031\145\032\146\033\147" +
    "\001\001\000\030\002\304\003\021\004\155\005\016\007" +
    "\020\012\154\023\143\024\151\031\145\032\146\033\147" +
    "\001\001\000\030\002\303\003\021\004\155\005\016\007" +
    "\020\012\154\023\143\024\151\031\145\032\146\033\147" +
    "\001\001\000\012\003\021\005\016\007\020\023\251\001" +
    "\001\000\030\002\250\003\021\004\155\005\016\007\020" +
    "\012\154\023\143\024\151\031\145\032\146\033\147\001" +
    "\001\000\004\017\241\001\001\000\006\006\105\013\237" +
    "\001\001\000\030\002\236\003\021\004\155\005\016\007" +
    "\020\012\154\023\143\024\151\031\145\032\146\033\147" +
    "\001\001\000\002\001\001\000\016\006\167\016\165\025" +
    "\157\026\160\027\163\030\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\062\011\217\001\001\000\004" +
    "\014\202\001\001\000\002\001\001\000\004\010\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\206\016\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\206\016\165\030\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\222\001\001\000\004\026\224" +
    "\001\001\000\004\011\217\001\001\000\002\001\001\000" +
    "\004\011\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\155\012\245\024\244\001\001\000\002" +
    "\001\001\000\010\006\206\016\165\030\243\001\001\000" +
    "\002\001\001\000\004\017\247\001\001\000\004\017\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\206" +
    "\016\165\030\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\266\001\001" +
    "\000\002\001\001\000\010\006\206\016\165\030\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\302\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\316\001\001\000\004\015\320\001\001\000" +
    "\010\006\206\016\165\030\322\001\001\000\002\001\001" +
    "\000\004\006\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\326\001\001\000\004" +
    "\015\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PRO_PRINCIPAL ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRO_PRINCIPAL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PRO_PRINCIPAL ::= Entero Principal ParentesisA ParentesisC CODIGO Devolver NumEntero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRO_PRINCIPAL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PRO_PRINCIPAL ::= Entero Principal ParentesisA ARGUMENTO ParentesisC CODIGO Devolver NumEntero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRO_PRINCIPAL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FUNCIONESF ::= DECLARACION_FUNCION FUNCIONESF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONESF",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FUNCIONESF ::= DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONESF",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // BIBLIOTECAS ::= Incluir CadenaT BIBLIOTECAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BIBLIOTECAS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // BIBLIOTECAS ::= Incluir CadenaT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BIBLIOTECAS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ARGUMENTO ::= DECLARACION Coma ARGUMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ARGUMENTO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACION_FUNCION ::= DECLARACION ParentesisA ParentesisC Tabulador Devolver Identificador ParentesisA SAL ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION_FUNCION ::= DECLARACION ParentesisA ParentesisC Tabulador Devolver OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION_FUNCION ::= DECLARACION ParentesisA ARGUMENTO ParentesisC Tabulador Devolver Identificador ParentesisA SAL ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION_FUNCION ::= DECLARACION ParentesisA ARGUMENTO ParentesisC Tabulador Devolver OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ITERATIVA_HACER ::= Hacer CODIGO_IT Mientras CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERATIVA_HACER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CODIGO_IT ::= Tabulador ASIGNACION CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO_IT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CODIGO_IT ::= Tabulador E_S CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO_IT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CODIGO_IT ::= Tabulador ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO_IT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CODIGO_IT ::= Tabulador E_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO_IT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ITERATIVA_DESDE ::= Desde DECLARACION Mientras CONDICION Incrementar NumEntero Hacer CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERATIVA_DESDE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ITERATIVA_DESDE ::= Desde Identificador Mientras CONDICION Incrementar NumEntero Hacer CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERATIVA_DESDE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ITERATIVA_DESDE ::= Desde DECLARACION Mientras CONDICION Decrementar NumEntero Hacer CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERATIVA_DESDE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ITERATIVA_DESDE ::= Desde Identificador Mientras CONDICION Decrementar NumEntero Hacer CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERATIVA_DESDE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ITERATIVA_DESDE ::= Desde DECLARACION Mientras CONDICION Hacer CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERATIVA_DESDE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ITERATIVA_DESDE ::= Desde Identificador Mientras CONDICION Hacer CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERATIVA_DESDE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SIG_CON ::= Sino Devolver VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIG_CON",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SIG_CON ::= Sino CONDICION Entonces Tabulador Devolver VALOR_N SIG_CON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIG_CON",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SIG_CON ::= Sino CONDICION Entonces Tabulador Devolver VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIG_CON",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SELECTIVA ::= Si CONDICION Entonces Tabulador Devolver VALOR_N SIG_CON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECTIVA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SELECTIVA ::= Si CONDICION Entonces Tabulador Devolver VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECTIVA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERANDO_CONDICION ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERANDO_CONDICION ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERANDO_CONDICION ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERANDO_CONDICION ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERANDO_CONDICION ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERANDO_CONDICION ::= Comparador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COMPARA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COMPARA ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICION ::= COMPARA OPERANDO_CONDICION COMPARA OPERANDO_LOGICO CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICION ::= COMPARA OPERANDO_CONDICION COMPARA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SAL ::= CadenaT Coma SAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SAL ::= VALOR_N Coma SAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SAL ::= Identificador Coma SAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SAL ::= CadenaT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SAL ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SAL ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E_S ::= Leer Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E_S",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E_S ::= Escribir SAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E_S",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERANDO_LOGICO ::= Or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERANDO_LOGICO ::= And 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERANDO ::= Exponenciacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERANDO ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERANDO ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERANDO ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERANDO ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERANDO ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACION_LOGICA ::= Identificador OPERANDO_LOGICO ParentesisA OPERACION_LOGICA ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACION_LOGICA ::= Identificador OPERANDO_LOGICO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACION_LOGICA ::= Identificador OPERANDO_LOGICO OPERACION_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACION ::= Identificador OPERANDO ParentesisA OPERACION ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION ::= VALOR_N OPERANDO ParentesisA OPERACION ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION ::= Identificador OPERANDO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACION ::= Identificador OPERANDO VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACION ::= VALOR_N OPERANDO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACION ::= VALOR_N OPERANDO VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACION ::= Identificador OPERANDO OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION ::= VALOR_N OPERANDO OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CON_CADENAS ::= CadenaT Suma CadenaT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CON_CADENAS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CON_CADENAS ::= CadenaT Suma CON_CADENAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CON_CADENAS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACION ::= VAR Igual Identificador Decremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACION ::= VAR Igual Decremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACION ::= VAR Igual Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACION ::= VAR Igual Incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= VAR Igual Identificador Decremento PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACION ::= VAR Igual Decremento Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACION ::= VAR Igual Identificador Incremento PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION ::= VAR Igual Incremento Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION ::= VAR Igual CONDICION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION ::= VAR Igual OPERACION_LOGICA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION ::= VAR Igual OPERACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION ::= VAR Igual CON_CADENAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= VAR Igual CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= VAR Igual OPERACION_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= VAR Igual OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION ::= VAR Igual CadenaT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= VAR Igual CadenaT PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= VAR Igual VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION ::= VAR Igual VALOR_N PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALOR_N ::= Falso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_N",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR_N ::= Verdadero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_N",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR_N ::= NumReal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_N",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALOR_N ::= NumEntero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_N",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO_N ::= Boleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_N",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO_N ::= Real 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_N",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_N ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_N",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VAR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_NUM ::= TIPO_N VAR Igual VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_NUM",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_NUM ::= TIPO_N VAR Igual VALOR_N PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_NUM",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_NUM ::= TIPO_N VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_NUM",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_NUM ::= TIPO_N VAR PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_NUM",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_CADENA ::= Cadena VAR Igual CadenaT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_CADENA ::= Cadena VAR Igual CadenaT PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_CADENA ::= Cadena VAR Igual VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_CADENA ::= Cadena VAR Igual VALOR_N PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_CADENA ::= Cadena VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION_CADENA ::= Cadena VAR PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= DECLARACION_CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= DECLARACION_NUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CODIGO ::= ITERATIVA_HACER CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CODIGO ::= ITERATIVA_HACER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CODIGO ::= ITERATIVA_DESDE CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CODIGO ::= ITERATIVA_DESDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CODIGO ::= SELECTIVA CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CODIGO ::= SELECTIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CODIGO ::= E_S CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODIGO ::= E_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CODIGO ::= ASIGNACION CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODIGO ::= DECLARACION CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= BIBLIOTECAS FUNCIONESF Punto PRO_PRINCIPAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

