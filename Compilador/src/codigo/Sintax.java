
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 16 16:10:04 CST 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 16 16:10:04 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\022\006\000\002\022" +
    "\005\000\002\022\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\004\000\002\002\004\000\002\002\003\000" +
    "\002\002\004\000\002\002\003\000\002\002\004\000\002" +
    "\002\003\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\023\003\000\002\023\003\000\002\007\005" +
    "\000\002\007\004\000\002\007\007\000\002\007\006\000" +
    "\002\007\007\000\002\007\006\000\002\003\005\000\002" +
    "\003\004\000\002\003\007\000\002\003\006\000\002\004" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\024\006\000\002\024\005\000\002" +
    "\024\006\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\006" +
    "\000\002\024\006\000\002\024\006\000\002\024\007\000" +
    "\002\024\007\000\002\024\007\000\002\024\007\000\002" +
    "\024\006\000\002\024\006\000\002\024\006\000\002\024" +
    "\006\000\002\027\005\000\002\027\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\007\000\002" +
    "\025\007\000\002\026\005\000\002\026\005\000\002\026" +
    "\007\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\005\000\002\012\005\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\030\005\000" +
    "\002\030\007\000\002\016\003\000\002\016\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\031\010" +
    "\000\002\031\011\000\002\031\011\000\002\015\010\000" +
    "\002\015\011\000\002\015\011\000\002\015\005\000\002" +
    "\015\006\000\002\032\010\000\002\032\010\000\002\032" +
    "\012\000\002\032\012\000\002\032\012\000\002\032\012" +
    "\000\002\017\004\000\002\017\004\000\002\017\005\000" +
    "\002\017\005\000\002\033\006\000\002\020\011\000\002" +
    "\020\012\000\002\020\014\000\002\020\015\000\002\020" +
    "\010\000\002\020\011\000\002\020\013\000\002\020\014" +
    "\000\002\021\003\000\002\021\005\000\002\034\004\000" +
    "\002\034\005\000\002\035\003\000\002\035\004\000\002" +
    "\036\012\000\002\036\011\000\002\036\013\000\002\036" +
    "\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\014\004\016\005\005\006\012\007\004\030" +
    "\014\001\002\000\004\076\uffe2\001\002\000\004\076\uffe3" +
    "\001\002\000\004\002\354\001\002\000\004\075\352\001" +
    "\002\000\004\066\324\001\002\000\004\002\ufffe\001\002" +
    "\000\004\076\036\001\002\000\004\076\036\001\002\000" +
    "\004\102\306\001\002\000\012\004\023\005\005\006\012" +
    "\007\004\001\002\000\006\036\024\076\uffe4\001\002\000" +
    "\040\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0\014\ufff0" +
    "\017\ufff0\020\ufff0\023\ufff0\024\ufff0\025\ufff0\066\ufff0\067" +
    "\ufff0\074\ufff0\076\ufff0\001\002\000\040\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\011\ufff1\014\ufff1\017\ufff1\020\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\066\ufff1\067\ufff1\074\ufff1\076\ufff1" +
    "\001\002\000\014\004\023\005\005\006\012\007\004\075" +
    "\uff82\001\002\000\004\075\uff81\001\002\000\004\076\uffe4" +
    "\001\002\000\004\066\025\001\002\000\014\004\023\005" +
    "\005\006\012\007\004\067\027\001\002\000\006\067\uff86" +
    "\074\300\001\002\000\026\004\023\005\005\006\012\007" +
    "\004\011\032\017\042\023\044\024\045\025\033\076\036" +
    "\001\002\000\004\067\031\001\002\000\026\004\023\005" +
    "\005\006\012\007\004\011\032\017\042\023\044\024\045" +
    "\025\033\076\036\001\002\000\014\015\057\016\051\076" +
    "\134\100\063\101\065\001\002\000\004\076\250\001\002" +
    "\000\030\004\023\005\005\006\012\007\004\011\032\014" +
    "\ufffd\017\042\023\044\024\045\025\033\076\036\001\002" +
    "\000\004\014\244\001\002\000\044\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\011\uffe5\014\uffe5\017\uffe5\020\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\043\uffe5\065\uffe5\066\uffe5\067\uffe5\074" +
    "\uffe5\076\uffe5\001\002\000\030\004\023\005\005\006\012" +
    "\007\004\011\032\014\ufff5\017\042\023\044\024\045\025" +
    "\033\076\036\001\002\000\030\004\023\005\005\006\012" +
    "\007\004\011\032\014\ufff7\017\042\023\044\024\045\025" +
    "\033\076\036\001\002\000\030\004\023\005\005\006\012" +
    "\007\004\011\032\014\ufff3\017\042\023\044\024\045\025" +
    "\033\076\036\001\002\000\014\004\023\005\005\006\012" +
    "\007\004\076\210\001\002\000\030\004\023\005\005\006" +
    "\012\007\004\011\032\014\ufffc\017\042\023\044\024\045" +
    "\025\033\076\036\001\002\000\004\103\176\001\002\000" +
    "\016\015\057\016\051\076\166\100\063\101\065\102\164" +
    "\001\002\000\030\004\023\005\005\006\012\007\004\011" +
    "\032\014\ufff9\017\042\023\044\024\045\025\033\076\036" +
    "\001\002\000\004\043\050\001\002\000\022\015\057\016" +
    "\051\052\054\053\055\076\060\100\063\101\065\102\062" +
    "\001\002\000\112\004\uffde\005\uffde\006\uffde\007\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\054\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\065\uffde\066" +
    "\uffde\067\uffde\074\uffde\075\uffde\076\uffde\103\uffde\001\002" +
    "\000\036\004\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\014" +
    "\uffd9\017\uffd9\020\uffd9\023\uffd9\024\uffd9\025\uffd9\065\161" +
    "\076\uffd9\103\uffd9\001\002\000\036\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\011\uffd8\014\uffd8\017\uffd8\020\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\065\160\076\uffd8\103\uffd8\001\002\000" +
    "\004\076\156\001\002\000\004\076\154\001\002\000\034" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\014\uffd6\017" +
    "\uffd6\020\uffd6\023\uffd6\024\uffd6\025\uffd6\076\uffd6\103\uffd6" +
    "\001\002\000\112\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\065\uffdf\066" +
    "\uffdf\067\uffdf\074\uffdf\075\uffdf\076\uffdf\103\uffdf\001\002" +
    "\000\042\044\075\045\073\046\076\047\070\050\071\051" +
    "\077\052\141\053\142\054\uffa8\055\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\062\135\063\137\001\002\000\016\054" +
    "\125\055\130\056\131\057\127\060\124\061\123\001\002" +
    "\000\040\004\uffda\005\uffda\006\uffda\007\uffda\011\uffda\014" +
    "\uffda\017\uffda\020\uffda\023\uffda\024\uffda\025\uffda\044\120" +
    "\065\117\076\uffda\103\uffda\001\002\000\112\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\065\uffe1\066\uffe1\067\uffe1\074\uffe1\075\uffe1" +
    "\076\uffe1\103\uffe1\001\002\000\066\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\011\uffdc\014\uffdc\017\uffdc\020\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\044\075\045\073\046\076\047\070\050" +
    "\071\051\077\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\065\074\076\uffdc\103\uffdc\001\002\000\112\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\065\uffe0\066\uffe0\067\uffe0\074\uffe0" +
    "\075\uffe0\076\uffe0\103\uffe0\001\002\000\036\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\011\uffd7\014\uffd7\017\uffd7\020\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\065\067\076\uffd7\103\uffd7\001" +
    "\002\000\034\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3" +
    "\014\uffd3\017\uffd3\020\uffd3\023\uffd3\024\uffd3\025\uffd3\076" +
    "\uffd3\103\uffd3\001\002\000\016\015\uffba\016\uffba\066\uffba" +
    "\076\uffba\100\uffba\101\uffba\001\002\000\016\015\uffb9\016" +
    "\uffb9\066\uffb9\076\uffb9\100\uffb9\101\uffb9\001\002\000\016" +
    "\015\057\016\051\066\100\076\103\100\063\101\065\001" +
    "\002\000\016\015\uffbc\016\uffbc\066\uffbc\076\uffbc\100\uffbc" +
    "\101\uffbc\001\002\000\034\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\011\uffdd\014\uffdd\017\uffdd\020\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\076\uffdd\103\uffdd\001\002\000\016\015\uffbd\016" +
    "\uffbd\066\uffbd\076\uffbd\100\uffbd\101\uffbd\001\002\000\016" +
    "\015\uffbb\016\uffbb\066\uffbb\076\uffbb\100\uffbb\101\uffbb\001" +
    "\002\000\016\015\uffb8\016\uffb8\066\uffb8\076\uffb8\100\uffb8" +
    "\101\uffb8\001\002\000\014\015\057\016\051\076\113\100" +
    "\063\101\065\001\002\000\056\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\011\uffc6\014\uffc6\017\uffc6\020\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\044\075\045\073\046\076\047\070\050\071" +
    "\051\077\065\uffc6\067\uffc6\075\uffc6\076\uffc6\103\uffc6\001" +
    "\002\000\042\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8" +
    "\014\uffc8\017\uffc8\020\uffc8\023\uffc8\024\uffc8\025\uffc8\065" +
    "\uffc8\067\uffc8\075\uffc8\076\uffc8\103\uffc8\001\002\000\056" +
    "\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5\014\uffc5\017" +
    "\uffc5\020\uffc5\023\uffc5\024\uffc5\025\uffc5\044\075\045\073" +
    "\046\076\047\070\050\071\051\077\065\uffc5\067\uffc5\075" +
    "\uffc5\076\uffc5\103\uffc5\001\002\000\016\015\057\016\051" +
    "\066\105\076\110\100\063\101\065\001\002\000\014\015" +
    "\057\016\051\076\113\100\063\101\065\001\002\000\056" +
    "\004\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4\014\uffc4\017" +
    "\uffc4\020\uffc4\023\uffc4\024\uffc4\025\uffc4\044\075\045\073" +
    "\046\076\047\070\050\071\051\077\065\uffc4\067\uffc4\075" +
    "\uffc4\076\uffc4\103\uffc4\001\002\000\042\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\011\uffc7\014\uffc7\017\uffc7\020\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\065\uffc7\067\uffc7\075\uffc7\076\uffc7" +
    "\103\uffc7\001\002\000\056\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\011\uffc3\014\uffc3\017\uffc3\020\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\044\075\045\073\046\076\047\070\050\071\051" +
    "\077\065\uffc3\067\uffc3\075\uffc3\076\uffc3\103\uffc3\001\002" +
    "\000\016\044\075\045\073\046\076\047\070\050\071\051" +
    "\077\001\002\000\004\067\114\001\002\000\016\044\075" +
    "\045\073\046\076\047\070\050\071\051\077\001\002\000" +
    "\042\004\uffc1\005\uffc1\006\uffc1\007\uffc1\011\uffc1\014\uffc1" +
    "\017\uffc1\020\uffc1\023\uffc1\024\uffc1\025\uffc1\065\uffc1\067" +
    "\uffc1\075\uffc1\076\uffc1\103\uffc1\001\002\000\004\067\116" +
    "\001\002\000\042\004\uffc2\005\uffc2\006\uffc2\007\uffc2\011" +
    "\uffc2\014\uffc2\017\uffc2\020\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\065\uffc2\067\uffc2\075\uffc2\076\uffc2\103\uffc2\001\002\000" +
    "\034\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\014\uffdb" +
    "\017\uffdb\020\uffdb\023\uffdb\024\uffdb\025\uffdb\076\uffdb\103" +
    "\uffdb\001\002\000\004\102\122\001\002\000\034\004\uffca" +
    "\005\uffca\006\uffca\007\uffca\011\uffca\014\uffca\017\uffca\020" +
    "\uffca\023\uffca\024\uffca\025\uffca\076\uffca\103\uffca\001\002" +
    "\000\036\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011\uffc9\014" +
    "\uffc9\017\uffc9\020\uffc9\023\uffc9\024\uffc9\025\uffc9\044\120" +
    "\076\uffc9\103\uffc9\001\002\000\014\015\uffa2\016\uffa2\076" +
    "\uffa2\100\uffa2\101\uffa2\001\002\000\014\015\uffa3\016\uffa3" +
    "\076\uffa3\100\uffa3\101\uffa3\001\002\000\014\015\uffa7\016" +
    "\uffa7\076\uffa7\100\uffa7\101\uffa7\001\002\000\014\015\057" +
    "\016\051\076\134\100\063\101\065\001\002\000\014\015" +
    "\uffa4\016\uffa4\076\uffa4\100\uffa4\101\uffa4\001\002\000\014" +
    "\015\uffa6\016\uffa6\076\uffa6\100\uffa6\101\uffa6\001\002\000" +
    "\014\015\uffa5\016\uffa5\076\uffa5\100\uffa5\101\uffa5\001\002" +
    "\000\064\004\uffa9\005\uffa9\006\uffa9\007\uffa9\011\uffa9\012" +
    "\uffa9\014\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060" +
    "\uffa9\061\uffa9\062\uffa9\063\uffa9\065\uffa9\076\uffa9\103\uffa9" +
    "\001\002\000\050\004\uffab\005\uffab\006\uffab\007\uffab\011" +
    "\uffab\012\uffab\014\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\062\135\063\137\065\uffab\076" +
    "\uffab\103\uffab\001\002\000\064\004\uffa8\005\uffa8\006\uffa8" +
    "\007\uffa8\011\uffa8\012\uffa8\014\uffa8\017\uffa8\020\uffa8\021" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\054\uffa8\055\uffa8" +
    "\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\065" +
    "\uffa8\076\uffa8\103\uffa8\001\002\000\016\015\uffb7\016\uffb7" +
    "\066\uffb7\076\uffb7\100\uffb7\101\uffb7\001\002\000\014\015" +
    "\057\016\051\076\134\100\063\101\065\001\002\000\016" +
    "\015\uffb6\016\uffb6\066\uffb6\076\uffb6\100\uffb6\101\uffb6\001" +
    "\002\000\044\004\uffaa\005\uffaa\006\uffaa\007\uffaa\011\uffaa" +
    "\012\uffaa\014\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\065\uffaa\076\uffaa\103\uffaa\001\002" +
    "\000\036\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd\014" +
    "\uffcd\017\uffcd\020\uffcd\023\uffcd\024\uffcd\025\uffcd\065\153" +
    "\076\uffcd\103\uffcd\001\002\000\036\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\011\uffcb\014\uffcb\017\uffcb\020\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\065\152\076\uffcb\103\uffcb\001\002\000" +
    "\006\066\144\076\145\001\002\000\004\076\147\001\002" +
    "\000\044\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\014" +
    "\uffbf\017\uffbf\020\uffbf\023\uffbf\024\uffbf\025\uffbf\062\135" +
    "\063\137\065\uffbf\067\uffbf\076\uffbf\103\uffbf\001\002\000" +
    "\040\004\uffc0\005\uffc0\006\uffc0\007\uffc0\011\uffc0\014\uffc0" +
    "\017\uffc0\020\uffc0\023\uffc0\024\uffc0\025\uffc0\065\uffc0\067" +
    "\uffc0\076\uffc0\103\uffc0\001\002\000\006\062\135\063\137" +
    "\001\002\000\004\067\151\001\002\000\040\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\011\uffbe\014\uffbe\017\uffbe\020\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\065\uffbe\067\uffbe\076\uffbe\103" +
    "\uffbe\001\002\000\034\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\011\uffcf\014\uffcf\017\uffcf\020\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\076\uffcf\103\uffcf\001\002\000\034\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\011\uffd1\014\uffd1\017\uffd1\020\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\076\uffd1\103\uffd1\001\002\000\036" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\014\uffcc\017" +
    "\uffcc\020\uffcc\023\uffcc\024\uffcc\025\uffcc\065\155\076\uffcc" +
    "\103\uffcc\001\002\000\034\004\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\011\uffd0\014\uffd0\017\uffd0\020\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\076\uffd0\103\uffd0\001\002\000\036\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\011\uffce\014\uffce\017\uffce\020\uffce" +
    "\023\uffce\024\uffce\025\uffce\065\157\076\uffce\103\uffce\001" +
    "\002\000\034\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2" +
    "\014\uffd2\017\uffd2\020\uffd2\023\uffd2\024\uffd2\025\uffd2\076" +
    "\uffd2\103\uffd2\001\002\000\034\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\011\uffd4\014\uffd4\017\uffd4\020\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\076\uffd4\103\uffd4\001\002\000\034\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\011\uffd5\014\uffd5\017\uffd5\020" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\076\uffd5\103\uffd5\001\002" +
    "\000\004\014\ufff8\001\002\000\042\004\uffb0\005\uffb0\006" +
    "\uffb0\007\uffb0\011\uffb0\014\uffb0\017\uffb0\020\uffb0\023\uffb0" +
    "\024\uffb0\025\uffb0\065\uffb0\067\uffb0\074\174\076\uffb0\103" +
    "\uffb0\001\002\000\042\004\uffaf\005\uffaf\006\uffaf\007\uffaf" +
    "\011\uffaf\014\uffaf\017\uffaf\020\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\065\uffaf\067\uffaf\074\172\076\uffaf\103\uffaf\001\002" +
    "\000\036\004\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5\014" +
    "\uffb5\017\uffb5\020\uffb5\023\uffb5\024\uffb5\025\uffb5\065\171" +
    "\076\uffb5\103\uffb5\001\002\000\042\004\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\011\uffb1\014\uffb1\017\uffb1\020\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\065\uffb1\067\uffb1\074\167\076\uffb1\103" +
    "\uffb1\001\002\000\016\015\057\016\051\076\166\100\063" +
    "\101\065\102\164\001\002\000\040\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\011\uffae\014\uffae\017\uffae\020\uffae\023\uffae" +
    "\024\uffae\025\uffae\065\uffae\067\uffae\076\uffae\103\uffae\001" +
    "\002\000\034\004\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3" +
    "\014\uffb3\017\uffb3\020\uffb3\023\uffb3\024\uffb3\025\uffb3\076" +
    "\uffb3\103\uffb3\001\002\000\016\015\057\016\051\076\166" +
    "\100\063\101\065\102\164\001\002\000\040\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\011\uffac\014\uffac\017\uffac\020\uffac" +
    "\023\uffac\024\uffac\025\uffac\065\uffac\067\uffac\076\uffac\103" +
    "\uffac\001\002\000\016\015\057\016\051\076\166\100\063" +
    "\101\065\102\164\001\002\000\040\004\uffad\005\uffad\006" +
    "\uffad\007\uffad\011\uffad\014\uffad\017\uffad\020\uffad\023\uffad" +
    "\024\uffad\025\uffad\065\uffad\067\uffad\076\uffad\103\uffad\001" +
    "\002\000\010\024\045\025\033\076\036\001\002\000\004" +
    "\020\200\001\002\000\014\015\057\016\051\076\134\100" +
    "\063\101\065\001\002\000\030\004\uff8f\005\uff8f\006\uff8f" +
    "\007\uff8f\011\uff8f\014\uff8f\017\uff8f\023\uff8f\024\uff8f\025" +
    "\uff8f\076\uff8f\001\002\000\034\004\uff92\005\uff92\006\uff92" +
    "\007\uff92\011\uff92\014\uff92\017\uff92\020\uff92\023\uff92\024" +
    "\uff92\025\uff92\076\uff92\103\176\001\002\000\034\004\uff93" +
    "\005\uff93\006\uff93\007\uff93\011\uff93\014\uff93\017\uff93\020" +
    "\uff93\023\uff93\024\uff93\025\uff93\076\uff93\103\176\001\002" +
    "\000\032\004\uff91\005\uff91\006\uff91\007\uff91\011\uff91\014" +
    "\uff91\017\uff91\020\uff91\023\uff91\024\uff91\025\uff91\076\uff91" +
    "\001\002\000\032\004\uff90\005\uff90\006\uff90\007\uff90\011" +
    "\uff90\014\uff90\017\uff90\020\uff90\023\uff90\024\uff90\025\uff90" +
    "\076\uff90\001\002\000\004\014\ufffa\001\002\000\004\020" +
    "\225\001\002\000\004\020\211\001\002\000\014\015\057" +
    "\016\051\076\134\100\063\101\065\001\002\000\010\021" +
    "\214\022\213\023\215\001\002\000\004\100\222\001\002" +
    "\000\004\100\217\001\002\000\004\103\176\001\002\000" +
    "\030\004\uff99\005\uff99\006\uff99\007\uff99\011\uff99\014\uff99" +
    "\017\uff99\023\uff99\024\uff99\025\uff99\076\uff99\001\002\000" +
    "\004\023\220\001\002\000\004\103\176\001\002\000\030" +
    "\004\uff95\005\uff95\006\uff95\007\uff95\011\uff95\014\uff95\017" +
    "\uff95\023\uff95\024\uff95\025\uff95\076\uff95\001\002\000\004" +
    "\023\223\001\002\000\004\103\176\001\002\000\030\004" +
    "\uff97\005\uff97\006\uff97\007\uff97\011\uff97\014\uff97\017\uff97" +
    "\023\uff97\024\uff97\025\uff97\076\uff97\001\002\000\014\015" +
    "\057\016\051\076\134\100\063\101\065\001\002\000\010" +
    "\021\230\022\227\023\231\001\002\000\004\100\236\001" +
    "\002\000\004\100\233\001\002\000\004\103\176\001\002" +
    "\000\030\004\uff98\005\uff98\006\uff98\007\uff98\011\uff98\014" +
    "\uff98\017\uff98\023\uff98\024\uff98\025\uff98\076\uff98\001\002" +
    "\000\004\023\234\001\002\000\004\103\176\001\002\000" +
    "\030\004\uff94\005\uff94\006\uff94\007\uff94\011\uff94\014\uff94" +
    "\017\uff94\023\uff94\024\uff94\025\uff94\076\uff94\001\002\000" +
    "\004\023\237\001\002\000\004\103\176\001\002\000\030" +
    "\004\uff96\005\uff96\006\uff96\007\uff96\011\uff96\014\uff96\017" +
    "\uff96\023\uff96\024\uff96\025\uff96\076\uff96\001\002\000\004" +
    "\014\ufff2\001\002\000\004\014\ufff6\001\002\000\004\014" +
    "\ufff4\001\002\000\004\100\245\001\002\000\006\002\uff80" +
    "\065\246\001\002\000\004\002\uff7e\001\002\000\004\014" +
    "\ufffb\001\002\000\036\004\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\011\uffb4\014\uffb4\017\uffb4\020\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\065\251\076\uffb4\103\uffb4\001\002\000\034\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\011\uffb2\014\uffb2\017\uffb2\020" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\076\uffb2\103\uffb2\001\002" +
    "\000\004\012\253\001\002\000\004\103\254\001\002\000" +
    "\004\014\255\001\002\000\012\015\057\016\051\100\063" +
    "\101\065\001\002\000\034\004\uffa1\005\uffa1\006\uffa1\007" +
    "\uffa1\011\uffa1\013\257\014\uffa1\017\uffa1\023\uffa1\024\uffa1" +
    "\025\uffa1\065\261\076\uffa1\001\002\000\016\014\262\015" +
    "\057\016\051\076\134\100\063\101\065\001\002\000\030" +
    "\004\uff9f\005\uff9f\006\uff9f\007\uff9f\011\uff9f\014\uff9f\017" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\076\uff9f\001\002\000\030" +
    "\004\uffa0\005\uffa0\006\uffa0\007\uffa0\011\uffa0\014\uffa0\017" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\076\uffa0\001\002\000\012" +
    "\015\057\016\051\100\063\101\065\001\002\000\004\012" +
    "\264\001\002\000\004\103\265\001\002\000\004\014\266" +
    "\001\002\000\012\015\057\016\051\100\063\101\065\001" +
    "\002\000\034\004\uff9e\005\uff9e\006\uff9e\007\uff9e\011\uff9e" +
    "\013\257\014\uff9e\017\uff9e\023\uff9e\024\uff9e\025\uff9e\065" +
    "\271\076\uff9e\001\002\000\030\004\uff9c\005\uff9c\006\uff9c" +
    "\007\uff9c\011\uff9c\014\uff9c\017\uff9c\023\uff9c\024\uff9c\025" +
    "\uff9c\076\uff9c\001\002\000\030\004\uff9d\005\uff9d\006\uff9d" +
    "\007\uff9d\011\uff9d\014\uff9d\017\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\076\uff9d\001\002\000\032\004\uff9b\005\uff9b\006\uff9b" +
    "\007\uff9b\011\uff9b\014\uff9b\017\uff9b\023\uff9b\024\uff9b\025" +
    "\uff9b\065\273\076\uff9b\001\002\000\030\004\uff9a\005\uff9a" +
    "\006\uff9a\007\uff9a\011\uff9a\014\uff9a\017\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\076\uff9a\001\002\000\004\014\275\001\002" +
    "\000\004\100\276\001\002\000\006\002\uff7f\065\277\001" +
    "\002\000\004\002\uff7d\001\002\000\012\004\023\005\005" +
    "\006\012\007\004\001\002\000\004\067\uff85\001\002\000" +
    "\004\075\303\001\002\000\004\004\305\001\002\000\004" +
    "\002\000\001\002\000\004\036\024\001\002\000\014\004" +
    "\uff84\005\uff84\006\uff84\007\uff84\030\014\001\002\000\012" +
    "\004\uff83\005\uff83\006\uff83\007\uff83\001\002\000\044\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8\014\uffe8\017\uffe8" +
    "\020\uffe8\023\uffe8\024\uffe8\025\uffe8\043\312\065\311\066" +
    "\uffe8\067\uffe8\074\uffe8\076\uffe8\001\002\000\040\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\011\uffe9\014\uffe9\017\uffe9\020" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\066\uffe9\067\uffe9\074\uffe9" +
    "\076\uffe9\001\002\000\012\015\057\016\051\100\063\101" +
    "\065\001\002\000\042\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\011\uffe6\014\uffe6\017\uffe6\020\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\065\314\066\uffe6\067\uffe6\074\uffe6\076\uffe6\001\002" +
    "\000\040\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\014" +
    "\uffe7\017\uffe7\020\uffe7\023\uffe7\024\uffe7\025\uffe7\066\uffe7" +
    "\067\uffe7\074\uffe7\076\uffe7\001\002\000\044\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\011\uffee\014\uffee\017\uffee\020\uffee" +
    "\023\uffee\024\uffee\025\uffee\043\317\065\316\066\uffee\067" +
    "\uffee\074\uffee\076\uffee\001\002\000\040\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\011\uffef\014\uffef\017\uffef\020\uffef\023" +
    "\uffef\024\uffef\025\uffef\066\uffef\067\uffef\074\uffef\076\uffef" +
    "\001\002\000\014\015\057\016\051\100\063\101\065\102" +
    "\321\001\002\000\042\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\011\uffec\014\uffec\017\uffec\020\uffec\023\uffec\024\uffec\025" +
    "\uffec\065\323\066\uffec\067\uffec\074\uffec\076\uffec\001\002" +
    "\000\042\004\uffea\005\uffea\006\uffea\007\uffea\011\uffea\014" +
    "\uffea\017\uffea\020\uffea\023\uffea\024\uffea\025\uffea\065\322" +
    "\066\uffea\067\uffea\074\uffea\076\uffea\001\002\000\040\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\014\uffeb\017\uffeb" +
    "\020\uffeb\023\uffeb\024\uffeb\025\uffeb\066\uffeb\067\uffeb\074" +
    "\uffeb\076\uffeb\001\002\000\040\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\011\uffed\014\uffed\017\uffed\020\uffed\023\uffed\024" +
    "\uffed\025\uffed\066\uffed\067\uffed\074\uffed\076\uffed\001\002" +
    "\000\014\004\023\005\005\006\012\007\004\067\325\001" +
    "\002\000\004\103\341\001\002\000\004\067\327\001\002" +
    "\000\004\103\330\001\002\000\004\014\331\001\002\000" +
    "\014\015\057\016\051\076\333\100\063\101\065\001\002" +
    "\000\016\004\uff8e\005\uff8e\006\uff8e\007\uff8e\065\340\075" +
    "\uff8e\001\002\000\020\044\075\045\073\046\076\047\070" +
    "\050\071\051\077\066\334\001\002\000\016\015\057\016" +
    "\051\076\166\100\063\101\065\102\164\001\002\000\004" +
    "\067\336\001\002\000\016\004\uff8c\005\uff8c\006\uff8c\007" +
    "\uff8c\065\337\075\uff8c\001\002\000\014\004\uff8b\005\uff8b" +
    "\006\uff8b\007\uff8b\075\uff8b\001\002\000\014\004\uff8d\005" +
    "\uff8d\006\uff8d\007\uff8d\075\uff8d\001\002\000\004\014\342" +
    "\001\002\000\014\015\057\016\051\076\344\100\063\101" +
    "\065\001\002\000\016\004\uff8a\005\uff8a\006\uff8a\007\uff8a" +
    "\065\351\075\uff8a\001\002\000\020\044\075\045\073\046" +
    "\076\047\070\050\071\051\077\066\345\001\002\000\016" +
    "\015\057\016\051\076\166\100\063\101\065\102\164\001" +
    "\002\000\004\067\347\001\002\000\016\004\uff88\005\uff88" +
    "\006\uff88\007\uff88\065\350\075\uff88\001\002\000\014\004" +
    "\uff87\005\uff87\006\uff87\007\uff87\075\uff87\001\002\000\014" +
    "\004\uff89\005\uff89\006\uff89\007\uff89\075\uff89\001\002\000" +
    "\004\004\305\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\024\003\017\005\012\007\016\020\020\022" +
    "\005\023\007\034\014\035\006\036\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\314" +
    "\001\001\000\004\004\307\001\001\000\002\001\001\000" +
    "\016\003\017\005\012\007\016\020\020\023\007\035\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\017\005\012\007\016\020\020\023\007" +
    "\035\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\017\005\012\007\016\021\027" +
    "\023\025\001\001\000\002\001\001\000\030\002\273\003" +
    "\017\004\046\005\012\007\016\012\045\023\033\024\042" +
    "\031\037\032\036\033\040\001\001\000\002\001\001\000" +
    "\030\002\034\003\017\004\046\005\012\007\016\012\045" +
    "\023\033\024\042\031\037\032\036\033\040\001\001\000" +
    "\010\006\131\016\060\030\251\001\001\000\002\001\001" +
    "\000\030\002\246\003\017\004\046\005\012\007\016\012" +
    "\045\023\033\024\042\031\037\032\036\033\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\242\003" +
    "\017\004\046\005\012\007\016\012\045\023\033\024\042" +
    "\031\037\032\036\033\040\001\001\000\030\002\241\003" +
    "\017\004\046\005\012\007\016\012\045\023\033\024\042" +
    "\031\037\032\036\033\040\001\001\000\030\002\240\003" +
    "\017\004\046\005\012\007\016\012\045\023\033\024\042" +
    "\031\037\032\036\033\040\001\001\000\012\003\017\005" +
    "\012\007\016\023\206\001\001\000\030\002\205\003\017" +
    "\004\046\005\012\007\016\012\045\023\033\024\042\031" +
    "\037\032\036\033\040\001\001\000\004\017\176\001\001" +
    "\000\006\006\162\013\164\001\001\000\030\002\161\003" +
    "\017\004\046\005\012\007\016\012\045\023\033\024\042" +
    "\031\037\032\036\033\040\001\001\000\002\001\001\000" +
    "\016\006\063\016\060\025\051\026\052\027\055\030\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\103\011\142\001\001\000" +
    "\004\014\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\100\025\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\110\025\114\001\001\000\004\010" +
    "\071\001\001\000\002\001\001\000\004\010\103\001\001" +
    "\000\006\006\105\025\106\001\001\000\006\006\110\025" +
    "\111\001\001\000\004\010\071\001\001\000\002\001\001" +
    "\000\004\010\103\001\001\000\004\010\071\001\001\000" +
    "\002\001\001\000\004\010\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\131\016\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\131\016\060\030\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\145\001\001\000\004\026\147\001\001\000\004\011" +
    "\142\001\001\000\002\001\001\000\004\011\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\162\013" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\162\013\172\001\001\000\002\001\001\000\006\006" +
    "\162\013\174\001\001\000\002\001\001\000\010\004\046" +
    "\012\202\024\201\001\001\000\002\001\001\000\010\006" +
    "\131\016\060\030\200\001\001\000\002\001\001\000\004" +
    "\017\204\001\001\000\004\017\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\131\016\060\030\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\223\001\001\000\002\001\001\000" +
    "\010\006\131\016\060\030\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\255\001\001\000\004\015\257" +
    "\001\001\000\010\006\131\016\060\030\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\266\001\001\000\004\015\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\017\005\012\007\016\021" +
    "\300\023\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\017\005\012\007\016\021\325\023\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\110\025\331\001\001\000\002\001" +
    "\001\000\004\010\103\001\001\000\006\006\162\013\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\110" +
    "\025\342\001\001\000\002\001\001\000\004\010\103\001" +
    "\001\000\006\006\162\013\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\352\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PRO_PRINCIPAL ::= Entero Principal ParentesisA ParentesisC CODIGO Devolver NumEntero PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRO_PRINCIPAL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PRO_PRINCIPAL ::= Entero Principal ParentesisA ARGUMENTO ParentesisC CODIGO Devolver NumEntero PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRO_PRINCIPAL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PRO_PRINCIPAL ::= Entero Principal ParentesisA ParentesisC CODIGO Devolver NumEntero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRO_PRINCIPAL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PRO_PRINCIPAL ::= Entero Principal ParentesisA ARGUMENTO ParentesisC CODIGO Devolver NumEntero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRO_PRINCIPAL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FUNCIONESF ::= DECLARACION_FUNCION FUNCIONESF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONESF",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FUNCIONESF ::= DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONESF",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // BIBLIOTECAS ::= Incluir CadenaT BIBLIOTECAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BIBLIOTECAS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // BIBLIOTECAS ::= Incluir CadenaT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BIBLIOTECAS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ARGUMENTO ::= DECLARACION Coma ARGUMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ARGUMENTO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECLARACION_FUNCION ::= DECLARACION ParentesisA ParentesisC Tabulador Devolver Identificador ParentesisA SAL ParentesisC PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARACION_FUNCION ::= DECLARACION ParentesisA ParentesisC Tabulador Devolver Identificador ParentesisA SAL ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARACION_FUNCION ::= DECLARACION ParentesisA ParentesisC Tabulador Devolver OPERACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLARACION_FUNCION ::= DECLARACION ParentesisA ParentesisC Tabulador Devolver OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLARACION_FUNCION ::= DECLARACION ParentesisA ARGUMENTO ParentesisC Tabulador Devolver Identificador ParentesisA SAL ParentesisC PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARACION_FUNCION ::= DECLARACION ParentesisA ARGUMENTO ParentesisC Tabulador Devolver Identificador ParentesisA SAL ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARACION_FUNCION ::= DECLARACION ParentesisA ARGUMENTO ParentesisC Tabulador Devolver OPERACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARACION_FUNCION ::= DECLARACION ParentesisA ARGUMENTO ParentesisC Tabulador Devolver OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ITERATIVA_HACER ::= Hacer CODIGO_IT Mientras CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERATIVA_HACER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CODIGO_IT ::= Tabulador ASIGNACION CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO_IT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CODIGO_IT ::= Tabulador E_S CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO_IT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CODIGO_IT ::= Tabulador ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO_IT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CODIGO_IT ::= Tabulador E_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO_IT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ITERATIVA_DESDE ::= Desde DECLARACION Mientras CONDICION Incrementar NumEntero Hacer CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERATIVA_DESDE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ITERATIVA_DESDE ::= Desde Identificador Mientras CONDICION Incrementar NumEntero Hacer CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERATIVA_DESDE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ITERATIVA_DESDE ::= Desde DECLARACION Mientras CONDICION Decrementar NumEntero Hacer CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERATIVA_DESDE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ITERATIVA_DESDE ::= Desde Identificador Mientras CONDICION Decrementar NumEntero Hacer CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERATIVA_DESDE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ITERATIVA_DESDE ::= Desde DECLARACION Mientras CONDICION Hacer CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERATIVA_DESDE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ITERATIVA_DESDE ::= Desde Identificador Mientras CONDICION Hacer CODIGO_IT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERATIVA_DESDE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SIG_CON ::= Sino Devolver VALOR_N PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIG_CON",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SIG_CON ::= Sino Devolver VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIG_CON",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SIG_CON ::= Sino CONDICION Entonces Tabulador Devolver VALOR_N SIG_CON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIG_CON",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SIG_CON ::= Sino CONDICION Entonces Tabulador Devolver VALOR_N PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIG_CON",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SIG_CON ::= Sino CONDICION Entonces Tabulador Devolver VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIG_CON",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SELECTIVA ::= Si CONDICION Entonces Tabulador Devolver VALOR_N SIG_CON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECTIVA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SELECTIVA ::= Si CONDICION Entonces Tabulador Devolver VALOR_N PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECTIVA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SELECTIVA ::= Si CONDICION Entonces Tabulador Devolver VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECTIVA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERANDO_CONDICION ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERANDO_CONDICION ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERANDO_CONDICION ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERANDO_CONDICION ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERANDO_CONDICION ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERANDO_CONDICION ::= Comparador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COMPARA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COMPARA ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICION ::= COMPARA OPERANDO_CONDICION COMPARA OPERANDO_LOGICO CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICION ::= COMPARA OPERANDO_CONDICION COMPARA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SAL ::= CadenaT Coma SAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SAL ::= VALOR_N Coma SAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SAL ::= Identificador Coma SAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SAL ::= CadenaT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SAL ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SAL ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E_S ::= Leer Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E_S",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E_S ::= Escribir SAL PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E_S",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E_S ::= Leer Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E_S",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E_S ::= Escribir SAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E_S",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERANDO_LOGICO ::= Or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERANDO_LOGICO ::= And 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERANDO ::= Exponenciacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERANDO ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERANDO ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERANDO ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERANDO ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERANDO ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACION_LOGICA ::= Identificador OPERANDO_LOGICO ParentesisA OPERACION_LOGICA ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACION_LOGICA ::= Identificador OPERANDO_LOGICO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACION_LOGICA ::= Identificador OPERANDO_LOGICO OPERACION_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACION ::= Identificador OPERANDO ParentesisA OPERACION ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACION ::= VALOR_N OPERANDO ParentesisA OPERACION ParentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACION ::= Identificador OPERANDO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION ::= Identificador OPERANDO VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION ::= VALOR_N OPERANDO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACION ::= VALOR_N OPERANDO VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACION ::= Identificador OPERANDO OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACION ::= VALOR_N OPERANDO OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CON_CADENAS ::= CadenaT Suma CadenaT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CON_CADENAS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CON_CADENAS ::= CadenaT Suma CON_CADENAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CON_CADENAS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION ::= VAR Igual Identificador Decremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION ::= VAR Igual Decremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACION ::= VAR Igual Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACION ::= VAR Igual Incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACION ::= VAR Igual Identificador Decremento PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACION ::= VAR Igual Decremento Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= VAR Igual Identificador Incremento PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACION ::= VAR Igual Incremento Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACION ::= VAR Igual CONDICION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION ::= VAR Igual OPERACION_LOGICA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION ::= VAR Igual OPERACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION ::= VAR Igual CON_CADENAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION ::= VAR Igual CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION ::= VAR Igual OPERACION_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= VAR Igual OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= VAR Igual CadenaT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= VAR Igual CadenaT PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION ::= VAR Igual VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= VAR Igual VALOR_N PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR_N ::= Falso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_N",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOR_N ::= Verdadero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_N",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALOR_N ::= NumReal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_N",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR_N ::= NumEntero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_N",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO_N ::= Boleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_N",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO_N ::= Real 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_N",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO_N ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_N",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VAR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_NUM ::= TIPO_N VAR Igual VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_NUM",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_NUM ::= TIPO_N VAR Igual VALOR_N PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_NUM",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_NUM ::= TIPO_N VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_NUM",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_NUM ::= TIPO_N VAR PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_NUM",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_CADENA ::= Cadena VAR Igual CadenaT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_CADENA ::= Cadena VAR Igual CadenaT PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_CADENA ::= Cadena VAR Igual VALOR_N 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_CADENA ::= Cadena VAR Igual VALOR_N PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_CADENA ::= Cadena VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_CADENA ::= Cadena VAR PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CADENA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= DECLARACION_CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= DECLARACION_NUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CODIGO ::= ITERATIVA_HACER CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CODIGO ::= ITERATIVA_HACER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CODIGO ::= ITERATIVA_DESDE CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CODIGO ::= ITERATIVA_DESDE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CODIGO ::= SELECTIVA CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CODIGO ::= SELECTIVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CODIGO ::= E_S CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CODIGO ::= E_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CODIGO ::= ASIGNACION CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODIGO ::= DECLARACION CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CODIGO ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODIGO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= PRO_PRINCIPAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= FUNCIONESF Punto PRO_PRINCIPAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= BIBLIOTECAS FUNCIONESF Punto PRO_PRINCIPAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

